// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Sales service
//
// Command:
// $ goa gen crm/design

package sales

import (
	"context"
	salesviews "crm/gen/sales/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 销售服务
type Service interface {
	// 获取单个销售
	Get(context.Context, *GetPayload) (res *Sales, err error)
	// 获取销售列表
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// 更新销售
	Update(context.Context, *UpdatePayload) (res *Sales, err error)
	// 创建销售
	Create(context.Context, *CreatePayload) (res *Sales, err error)
	// 删除销售
	Delete(context.Context, *DeletePayload) (res *SuccessResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Sales"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"Get", "List", "Update", "Create", "Delete"}

// GetPayload is the payload type of the Sales service Get method.
type GetPayload struct {
	// JWT used for authentication
	Token string
	ID    string
}

// Sales is the result type of the Sales service Get method.
type Sales struct {
	// ID
	ID string
	// 销售单名
	Name string
	// 销售编码
	Code string
	// 客户
	Customer *Customer
	// 销售金额
	Money int
	// 销售日期
	ConsignmentDate string
	// 销售还是退货
	IsSalesReturn bool
	// 备注
	Note string
	// 负责人
	Head *Head
	// 创建人
	Founder *Founder
}

// ListPayload is the payload type of the Sales service List method.
type ListPayload struct {
	// JWT used for authentication
	Token string
}

// ListResult is the result type of the Sales service List method.
type ListResult struct {
	Items []*Sales
	// 下一页游标
	NextCursor int
	// 总记录数
	Total int
}

// UpdatePayload is the payload type of the Sales service Update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// 用户ID
	ID string
	// 销售单名
	Name string
	// 客户ID
	CustomerID string
	// 销售金额
	Money int
	// 销售日期
	ConsignmentDate *string
	// 销售还是退货
	IsSalesReturn bool
	// 备注
	Note string
	// 负责人ID
	HeadID string
}

// CreatePayload is the payload type of the Sales service Create method.
type CreatePayload struct {
	// JWT used for authentication
	Token string
	// 销售单名
	Name string
	// 销售编码
	Code string
	// 客户ID
	CustomerID string
	// 销售金额
	Money int
	// 销售日期
	ConsignmentDate string
	// 销售还是退货
	IsSalesReturn bool
	// 备注
	Note string
	// 负责人
	HeadID string
	// 创建人
	FounderID string
}

// DeletePayload is the payload type of the Sales service Delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	Ids   []string
}

// SuccessResult is the result type of the Sales service Delete method.
type SuccessResult struct {
	// success
	OK bool
}

type Customer struct {
	// ID
	ID string
	// 客户姓名
	Name string
	// 客户来源
	Src int
	// 客户手机
	Mobile string
	// 客户网址
	URL string
	// 客户邮箱
	Email string
	// 客户行业
	Industry int
	// 客户等级
	Level int
	// 备注
	Note string
	// 客户地址
	Address string
}

type Head struct {
	// ID
	ID string
	// 姓名
	Name string
}

type Founder struct {
	// ID
	ID string
	// 姓名
	Name string
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewSales initializes result type Sales from viewed result type Sales.
func NewSales(vres *salesviews.Sales) *Sales {
	return newSales(vres.Projected)
}

// NewViewedSales initializes viewed result type Sales from result type Sales
// using the given view.
func NewViewedSales(res *Sales, view string) *salesviews.Sales {
	p := newSalesView(res)
	return &salesviews.Sales{Projected: p, View: "default"}
}

// NewSuccessResult initializes result type SuccessResult from viewed result
// type SuccessResult.
func NewSuccessResult(vres *salesviews.SuccessResult) *SuccessResult {
	return newSuccessResult(vres.Projected)
}

// NewViewedSuccessResult initializes viewed result type SuccessResult from
// result type SuccessResult using the given view.
func NewViewedSuccessResult(res *SuccessResult, view string) *salesviews.SuccessResult {
	p := newSuccessResultView(res)
	return &salesviews.SuccessResult{Projected: p, View: "default"}
}

// newSales converts projected type Sales to service type Sales.
func newSales(vres *salesviews.SalesView) *Sales {
	res := &Sales{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Money != nil {
		res.Money = *vres.Money
	}
	if vres.ConsignmentDate != nil {
		res.ConsignmentDate = *vres.ConsignmentDate
	}
	if vres.IsSalesReturn != nil {
		res.IsSalesReturn = *vres.IsSalesReturn
	}
	if vres.Note != nil {
		res.Note = *vres.Note
	}
	if vres.Customer != nil {
		res.Customer = newCustomer(vres.Customer)
	}
	if vres.Head != nil {
		res.Head = newHead(vres.Head)
	}
	if vres.Founder != nil {
		res.Founder = newFounder(vres.Founder)
	}
	return res
}

// newSalesView projects result type Sales to projected type SalesView using
// the "default" view.
func newSalesView(res *Sales) *salesviews.SalesView {
	vres := &salesviews.SalesView{
		ID:              &res.ID,
		Name:            &res.Name,
		Code:            &res.Code,
		Money:           &res.Money,
		ConsignmentDate: &res.ConsignmentDate,
		IsSalesReturn:   &res.IsSalesReturn,
		Note:            &res.Note,
	}
	if res.Customer != nil {
		vres.Customer = newCustomerView(res.Customer)
	}
	if res.Head != nil {
		vres.Head = newHeadView(res.Head)
	}
	if res.Founder != nil {
		vres.Founder = newFounderView(res.Founder)
	}
	return vres
}

// newCustomer converts projected type Customer to service type Customer.
func newCustomer(vres *salesviews.CustomerView) *Customer {
	res := &Customer{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Src != nil {
		res.Src = *vres.Src
	}
	if vres.Mobile != nil {
		res.Mobile = *vres.Mobile
	}
	if vres.URL != nil {
		res.URL = *vres.URL
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Industry != nil {
		res.Industry = *vres.Industry
	}
	if vres.Level != nil {
		res.Level = *vres.Level
	}
	if vres.Note != nil {
		res.Note = *vres.Note
	}
	if vres.Address != nil {
		res.Address = *vres.Address
	}
	return res
}

// newCustomerView projects result type Customer to projected type CustomerView
// using the "default" view.
func newCustomerView(res *Customer) *salesviews.CustomerView {
	vres := &salesviews.CustomerView{
		ID:       &res.ID,
		Name:     &res.Name,
		Src:      &res.Src,
		Mobile:   &res.Mobile,
		URL:      &res.URL,
		Email:    &res.Email,
		Industry: &res.Industry,
		Level:    &res.Level,
		Note:     &res.Note,
		Address:  &res.Address,
	}
	return vres
}

// newHead converts projected type Head to service type Head.
func newHead(vres *salesviews.HeadView) *Head {
	res := &Head{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newHeadView projects result type Head to projected type HeadView using the
// "default" view.
func newHeadView(res *Head) *salesviews.HeadView {
	vres := &salesviews.HeadView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newFounder converts projected type Founder to service type Founder.
func newFounder(vres *salesviews.FounderView) *Founder {
	res := &Founder{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newFounderView projects result type Founder to projected type FounderView
// using the "default" view.
func newFounderView(res *Founder) *salesviews.FounderView {
	vres := &salesviews.FounderView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newSuccessResult converts projected type SuccessResult to service type
// SuccessResult.
func newSuccessResult(vres *salesviews.SuccessResultView) *SuccessResult {
	res := &SuccessResult{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessResultView projects result type SuccessResult to projected type
// SuccessResultView using the "default" view.
func newSuccessResultView(res *SuccessResult) *salesviews.SuccessResultView {
	vres := &salesviews.SuccessResultView{
		OK: &res.OK,
	}
	return vres
}
