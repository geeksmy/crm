// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Sales views
//
// Command:
// $ goa gen crm/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Sales is the viewed result type that is projected based on a view.
type Sales struct {
	// Type to project
	Projected *SalesView
	// View to render
	View string
}

// SuccessResult is the viewed result type that is projected based on a view.
type SuccessResult struct {
	// Type to project
	Projected *SuccessResultView
	// View to render
	View string
}

// SalesView is a type that runs validations on a projected type.
type SalesView struct {
	// ID
	ID *string
	// 销售单名
	Name *string
	// 销售编码
	Code *string
	// 客户
	Customer *CustomerView
	// 销售金额
	Money *int
	// 销售日期
	ConsignmentDate *string
	// 销售还是退货
	IsSalesReturn *bool
	// 备注
	Note *string
	// 负责人
	Head *HeadView
	// 创建人
	Founder *FounderView
}

// CustomerView is a type that runs validations on a projected type.
type CustomerView struct {
	// ID
	ID *string
	// 客户姓名
	Name *string
	// 客户来源
	Src *int
	// 客户手机
	Mobile *string
	// 客户网址
	URL *string
	// 客户邮箱
	Email *string
	// 客户行业
	Industry *int
	// 客户等级
	Level *int
	// 备注
	Note *string
	// 客户地址
	Address *string
}

// HeadView is a type that runs validations on a projected type.
type HeadView struct {
	// ID
	ID *string
	// 姓名
	Name *string
}

// FounderView is a type that runs validations on a projected type.
type FounderView struct {
	// ID
	ID *string
	// 姓名
	Name *string
}

// SuccessResultView is a type that runs validations on a projected type.
type SuccessResultView struct {
	// success
	OK *bool
}

var (
	// SalesMap is a map of attribute names in result type Sales indexed by view
	// name.
	SalesMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"code",
			"customer",
			"money",
			"consignment_date",
			"is_sales_return",
			"note",
			"head",
			"founder",
		},
	}
	// SuccessResultMap is a map of attribute names in result type SuccessResult
	// indexed by view name.
	SuccessResultMap = map[string][]string{
		"default": []string{
			"ok",
		},
	}
	// CustomerMap is a map of attribute names in result type Customer indexed by
	// view name.
	CustomerMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"src",
			"mobile",
			"url",
			"email",
			"industry",
			"level",
			"note",
			"address",
		},
	}
	// HeadMap is a map of attribute names in result type Head indexed by view name.
	HeadMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
	// FounderMap is a map of attribute names in result type Founder indexed by
	// view name.
	FounderMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateSales runs the validations defined on the viewed result type Sales.
func ValidateSales(result *Sales) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSalesView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessResult runs the validations defined on the viewed result type
// SuccessResult.
func ValidateSuccessResult(result *SuccessResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSalesView runs the validations defined on SalesView using the
// "default" view.
func ValidateSalesView(result *SalesView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "result"))
	}
	if result.Money == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("money", "result"))
	}
	if result.ConsignmentDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("consignment_date", "result"))
	}
	if result.IsSalesReturn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_sales_return", "result"))
	}
	if result.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "result"))
	}
	if result.IsSalesReturn != nil {
		if !(*result.IsSalesReturn == false || *result.IsSalesReturn == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.is_sales_return", *result.IsSalesReturn, []interface{}{false, true}))
		}
	}
	if result.Customer != nil {
		if err2 := ValidateCustomerView(result.Customer); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Head != nil {
		if err2 := ValidateHeadView(result.Head); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Founder != nil {
		if err2 := ValidateFounderView(result.Founder); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateCustomerView runs the validations defined on CustomerView using the
// "default" view.
func ValidateCustomerView(result *CustomerView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Src == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("src", "result"))
	}
	if result.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "result"))
	}
	if result.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Industry == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("industry", "result"))
	}
	if result.Level == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("level", "result"))
	}
	if result.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "result"))
	}
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	return
}

// ValidateHeadView runs the validations defined on HeadView using the
// "default" view.
func ValidateHeadView(result *HeadView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateFounderView runs the validations defined on FounderView using the
// "default" view.
func ValidateFounderView(result *FounderView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateSuccessResultView runs the validations defined on SuccessResultView
// using the "default" view.
func ValidateSuccessResultView(result *SuccessResultView) (err error) {
	if result.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "result"))
	}
	return
}
