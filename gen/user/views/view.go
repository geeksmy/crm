// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User views
//
// Command:
// $ goa gen crm/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// User is the viewed result type that is projected based on a view.
type User struct {
	// Type to project
	Projected *UserView
	// View to render
	View string
}

// SuccessResult is the viewed result type that is projected based on a view.
type SuccessResult struct {
	// Type to project
	Projected *SuccessResultView
	// View to render
	View string
}

// UserView is a type that runs validations on a projected type.
type UserView struct {
	// ID
	ID *string
	// 用户名
	Username *string
	// 姓名
	Name *string
	// 手机号
	Mobile *string
	// 邮箱
	Email *string
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int
	// 是否是管理员
	IsAdmin *bool
	// 直属上级
	Superior *SuperiorView
	// 所属组
	Group *GroupView
}

// SuperiorView is a type that runs validations on a projected type.
type SuperiorView struct {
	// ID
	ID *string
	// 姓名
	Name *string
}

// GroupView is a type that runs validations on a projected type.
type GroupView struct {
	// ID
	ID *string
	// 组名
	Name *string
}

// SuccessResultView is a type that runs validations on a projected type.
type SuccessResultView struct {
	// success
	OK *bool
}

var (
	// UserMap is a map of attribute names in result type User indexed by view name.
	UserMap = map[string][]string{
		"default": []string{
			"id",
			"username",
			"mobile",
			"name",
			"email",
			"jobs",
			"is_admin",
			"superior",
			"group",
		},
	}
	// SuccessResultMap is a map of attribute names in result type SuccessResult
	// indexed by view name.
	SuccessResultMap = map[string][]string{
		"default": []string{
			"ok",
		},
	}
	// SuperiorMap is a map of attribute names in result type Superior indexed by
	// view name.
	SuperiorMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
	// GroupMap is a map of attribute names in result type Group indexed by view
	// name.
	GroupMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateUser runs the validations defined on the viewed result type User.
func ValidateUser(result *User) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateUserView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessResult runs the validations defined on the viewed result type
// SuccessResult.
func ValidateSuccessResult(result *SuccessResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateUserView runs the validations defined on UserView using the
// "default" view.
func ValidateUserView(result *UserView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "result"))
	}
	if result.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "result"))
	}
	if result.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "result"))
	}
	if result.IsAdmin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_admin", "result"))
	}
	if result.Jobs != nil {
		if !(*result.Jobs == 1 || *result.Jobs == 2 || *result.Jobs == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.jobs", *result.Jobs, []interface{}{1, 2, 3}))
		}
	}
	if result.Superior != nil {
		if err2 := ValidateSuperiorView(result.Superior); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Group != nil {
		if err2 := ValidateGroupView(result.Group); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSuperiorView runs the validations defined on SuperiorView using the
// "default" view.
func ValidateSuperiorView(result *SuperiorView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateGroupView runs the validations defined on GroupView using the
// "default" view.
func ValidateGroupView(result *GroupView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateSuccessResultView runs the validations defined on SuccessResultView
// using the "default" view.
func ValidateSuccessResultView(result *SuccessResultView) (err error) {
	if result.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "result"))
	}
	return
}
