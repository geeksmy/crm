// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Warehouse views
//
// Command:
// $ goa gen crm/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Warehouse is the viewed result type that is projected based on a view.
type Warehouse struct {
	// Type to project
	Projected *WarehouseView
	// View to render
	View string
}

// SuccessResult is the viewed result type that is projected based on a view.
type SuccessResult struct {
	// Type to project
	Projected *SuccessResultView
	// View to render
	View string
}

// WarehouseView is a type that runs validations on a projected type.
type WarehouseView struct {
	// ID
	ID *string
	// 仓库名
	Name *string
	// 仓库编码
	Code *string
	// 仓库地址
	Address *string
	// 仓库状态
	Type *int
	// 创建人
	Founder *FounderView
}

// FounderView is a type that runs validations on a projected type.
type FounderView struct {
	// ID
	ID *string
	// 姓名
	Name *string
}

// SuccessResultView is a type that runs validations on a projected type.
type SuccessResultView struct {
	// success
	OK *bool
}

var (
	// WarehouseMap is a map of attribute names in result type Warehouse indexed by
	// view name.
	WarehouseMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"code",
			"address",
			"type",
			"founder",
		},
	}
	// SuccessResultMap is a map of attribute names in result type SuccessResult
	// indexed by view name.
	SuccessResultMap = map[string][]string{
		"default": []string{
			"ok",
		},
	}
	// FounderMap is a map of attribute names in result type Founder indexed by
	// view name.
	FounderMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateWarehouse runs the validations defined on the viewed result type
// Warehouse.
func ValidateWarehouse(result *Warehouse) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateWarehouseView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessResult runs the validations defined on the viewed result type
// SuccessResult.
func ValidateSuccessResult(result *SuccessResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateWarehouseView runs the validations defined on WarehouseView using
// the "default" view.
func ValidateWarehouseView(result *WarehouseView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "result"))
	}
	if result.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.Founder != nil {
		if err2 := ValidateFounderView(result.Founder); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFounderView runs the validations defined on FounderView using the
// "default" view.
func ValidateFounderView(result *FounderView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateSuccessResultView runs the validations defined on SuccessResultView
// using the "default" view.
func ValidateSuccessResultView(result *SuccessResultView) (err error) {
	if result.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "result"))
	}
	return
}
