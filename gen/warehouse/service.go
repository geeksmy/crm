// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Warehouse service
//
// Command:
// $ goa gen crm/design

package warehouse

import (
	"context"
	warehouseviews "crm/gen/warehouse/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 仓库服务
type Service interface {
	// 获取单个仓库
	Get(context.Context, *GetPayload) (res *Warehouse, err error)
	// 获取仓库列表
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// 更新仓库
	Update(context.Context, *UpdatePayload) (res *Warehouse, err error)
	// 创建仓库
	Create(context.Context, *CreatePayload) (res *Warehouse, err error)
	// 删除仓库
	Delete(context.Context, *DeletePayload) (res *SuccessResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Warehouse"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"Get", "List", "Update", "Create", "Delete"}

// GetPayload is the payload type of the Warehouse service Get method.
type GetPayload struct {
	// JWT used for authentication
	Token string
	ID    string
}

// Warehouse is the result type of the Warehouse service Get method.
type Warehouse struct {
	// ID
	ID string
	// 仓库名
	Name string
	// 仓库编码
	Code string
	// 仓库地址
	Address string
	// 仓库状态
	Type int
	// 创建人
	Founder *Founder
}

// ListPayload is the payload type of the Warehouse service List method.
type ListPayload struct {
	// JWT used for authentication
	Token string
}

// ListResult is the result type of the Warehouse service List method.
type ListResult struct {
	Items []*Warehouse
	// 下一页游标
	NextCursor int
	// 总记录数
	Total int
}

// UpdatePayload is the payload type of the Warehouse service Update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// ID
	ID string
	// 仓库名
	Name string
	// 仓库编码
	Code string
	// 仓库地址
	Address string
	// 仓库状态
	Type int
}

// CreatePayload is the payload type of the Warehouse service Create method.
type CreatePayload struct {
	// JWT used for authentication
	Token string
	// 仓库名
	Name string
	// 仓库编码
	Code string
	// 仓库地址
	Address string
	// 仓库状态
	Type int
	// 创建人ID
	FounderID string
}

// DeletePayload is the payload type of the Warehouse service Delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	Ids   []string
}

// SuccessResult is the result type of the Warehouse service Delete method.
type SuccessResult struct {
	// success
	OK bool
}

type Founder struct {
	// ID
	ID string
	// 姓名
	Name string
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewWarehouse initializes result type Warehouse from viewed result type
// Warehouse.
func NewWarehouse(vres *warehouseviews.Warehouse) *Warehouse {
	return newWarehouse(vres.Projected)
}

// NewViewedWarehouse initializes viewed result type Warehouse from result type
// Warehouse using the given view.
func NewViewedWarehouse(res *Warehouse, view string) *warehouseviews.Warehouse {
	p := newWarehouseView(res)
	return &warehouseviews.Warehouse{Projected: p, View: "default"}
}

// NewSuccessResult initializes result type SuccessResult from viewed result
// type SuccessResult.
func NewSuccessResult(vres *warehouseviews.SuccessResult) *SuccessResult {
	return newSuccessResult(vres.Projected)
}

// NewViewedSuccessResult initializes viewed result type SuccessResult from
// result type SuccessResult using the given view.
func NewViewedSuccessResult(res *SuccessResult, view string) *warehouseviews.SuccessResult {
	p := newSuccessResultView(res)
	return &warehouseviews.SuccessResult{Projected: p, View: "default"}
}

// newWarehouse converts projected type Warehouse to service type Warehouse.
func newWarehouse(vres *warehouseviews.WarehouseView) *Warehouse {
	res := &Warehouse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Address != nil {
		res.Address = *vres.Address
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Founder != nil {
		res.Founder = newFounder(vres.Founder)
	}
	return res
}

// newWarehouseView projects result type Warehouse to projected type
// WarehouseView using the "default" view.
func newWarehouseView(res *Warehouse) *warehouseviews.WarehouseView {
	vres := &warehouseviews.WarehouseView{
		ID:      &res.ID,
		Name:    &res.Name,
		Code:    &res.Code,
		Address: &res.Address,
		Type:    &res.Type,
	}
	if res.Founder != nil {
		vres.Founder = newFounderView(res.Founder)
	}
	return vres
}

// newFounder converts projected type Founder to service type Founder.
func newFounder(vres *warehouseviews.FounderView) *Founder {
	res := &Founder{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newFounderView projects result type Founder to projected type FounderView
// using the "default" view.
func newFounderView(res *Founder) *warehouseviews.FounderView {
	vres := &warehouseviews.FounderView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newSuccessResult converts projected type SuccessResult to service type
// SuccessResult.
func newSuccessResult(vres *warehouseviews.SuccessResultView) *SuccessResult {
	res := &SuccessResult{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessResultView projects result type SuccessResult to projected type
// SuccessResultView using the "default" view.
func newSuccessResultView(res *SuccessResult) *warehouseviews.SuccessResultView {
	vres := &warehouseviews.SuccessResultView{
		OK: &res.OK,
	}
	return vres
}
