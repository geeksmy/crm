// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth client
//
// Command:
// $ goa gen crm/design

package auth

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "Auth" service client.
type Client struct {
	LoginEndpoint          goa.Endpoint
	UpdatePasswordEndpoint goa.Endpoint
	CaptchaImageEndpoint   goa.Endpoint
}

// NewClient initializes a "Auth" service client given the endpoints.
func NewClient(login, updatePassword, captchaImage goa.Endpoint) *Client {
	return &Client{
		LoginEndpoint:          login,
		UpdatePasswordEndpoint: updatePassword,
		CaptchaImageEndpoint:   captchaImage,
	}
}

// Login calls the "Login" endpoint of the "Auth" service.
func (c *Client) Login(ctx context.Context, p *LoginPayload) (res *Session, err error) {
	var ires interface{}
	ires, err = c.LoginEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Session), nil
}

// UpdatePassword calls the "UpdatePassword" endpoint of the "Auth" service.
func (c *Client) UpdatePassword(ctx context.Context, p *UpdatePasswordPayload) (res *SuccessResult, err error) {
	var ires interface{}
	ires, err = c.UpdatePasswordEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*SuccessResult), nil
}

// CaptchaImage calls the "CaptchaImage" endpoint of the "Auth" service.
func (c *Client) CaptchaImage(ctx context.Context) (res *Captcha, err error) {
	var ires interface{}
	ires, err = c.CaptchaImageEndpoint(ctx, nil)
	if err != nil {
		return
	}
	return ires.(*Captcha), nil
}
