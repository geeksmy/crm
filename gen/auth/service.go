// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth service
//
// Command:
// $ goa gen crm/design

package auth

import (
	"context"
	authviews "crm/gen/auth/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 鉴权服务
type Service interface {
	// 使用账号密码登录
	Login(context.Context, *LoginPayload) (res *Session, err error)
	// 修改登录密码
	UpdatePassword(context.Context, *UpdatePasswordPayload) (res *SuccessResult, err error)
	// 获取图形验证码
	CaptchaImage(context.Context) (res *Captcha, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Auth"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [3]string{"Login", "UpdatePassword", "CaptchaImage"}

// LoginPayload is the payload type of the Auth service Login method.
type LoginPayload struct {
	// 用户名
	Username string
	// 密码
	Password string
	// 图形验证码
	HumanCode string
	// 图形验证码ID
	CaptchaID string
}

// Session is the result type of the Auth service Login method.
type Session struct {
	User        *User
	Credentials *Credentials
}

// UpdatePasswordPayload is the payload type of the Auth service UpdatePassword
// method.
type UpdatePasswordPayload struct {
	// JWT used for authentication
	Token       string
	ID          string
	OldPassword string
	NewPassword string
}

// SuccessResult is the result type of the Auth service UpdatePassword method.
type SuccessResult struct {
	// success
	OK bool
}

// Captcha is the result type of the Auth service CaptchaImage method.
type Captcha struct {
	// 图片base64
	Image string
	// 验证码ID
	CaptchaID string
}

// 用户
type User struct {
	// ID
	ID string
	// 用户名
	Username string
	// 姓名
	Name string
	// 手机号
	Mobile string
	// 邮箱
	Email string
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs int
	// 是否是管理员
	IsAdmin bool
	// 直属上级
	Superior *Superior
	// 所属组
	Group *Group
}

type Superior struct {
	// ID
	ID string
	// 姓名
	Name string
}

type Group struct {
	// ID
	ID string
	// 组名
	Name string
}

type Credentials struct {
	// JWT token
	Token string
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewSession initializes result type Session from viewed result type Session.
func NewSession(vres *authviews.Session) *Session {
	return newSession(vres.Projected)
}

// NewViewedSession initializes viewed result type Session from result type
// Session using the given view.
func NewViewedSession(res *Session, view string) *authviews.Session {
	p := newSessionView(res)
	return &authviews.Session{Projected: p, View: "default"}
}

// NewSuccessResult initializes result type SuccessResult from viewed result
// type SuccessResult.
func NewSuccessResult(vres *authviews.SuccessResult) *SuccessResult {
	return newSuccessResult(vres.Projected)
}

// NewViewedSuccessResult initializes viewed result type SuccessResult from
// result type SuccessResult using the given view.
func NewViewedSuccessResult(res *SuccessResult, view string) *authviews.SuccessResult {
	p := newSuccessResultView(res)
	return &authviews.SuccessResult{Projected: p, View: "default"}
}

// NewCaptcha initializes result type Captcha from viewed result type Captcha.
func NewCaptcha(vres *authviews.Captcha) *Captcha {
	return newCaptcha(vres.Projected)
}

// NewViewedCaptcha initializes viewed result type Captcha from result type
// Captcha using the given view.
func NewViewedCaptcha(res *Captcha, view string) *authviews.Captcha {
	p := newCaptchaView(res)
	return &authviews.Captcha{Projected: p, View: "default"}
}

// newSession converts projected type Session to service type Session.
func newSession(vres *authviews.SessionView) *Session {
	res := &Session{}
	if vres.Credentials != nil {
		res.Credentials = transformAuthviewsCredentialsViewToCredentials(vres.Credentials)
	}
	if vres.User != nil {
		res.User = newUser(vres.User)
	}
	return res
}

// newSessionView projects result type Session to projected type SessionView
// using the "default" view.
func newSessionView(res *Session) *authviews.SessionView {
	vres := &authviews.SessionView{}
	if res.Credentials != nil {
		vres.Credentials = transformCredentialsToAuthviewsCredentialsView(res.Credentials)
	}
	if res.User != nil {
		vres.User = newUserView(res.User)
	}
	return vres
}

// newUser converts projected type User to service type User.
func newUser(vres *authviews.UserView) *User {
	res := &User{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Username != nil {
		res.Username = *vres.Username
	}
	if vres.Mobile != nil {
		res.Mobile = *vres.Mobile
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Email != nil {
		res.Email = *vres.Email
	}
	if vres.Jobs != nil {
		res.Jobs = *vres.Jobs
	}
	if vres.IsAdmin != nil {
		res.IsAdmin = *vres.IsAdmin
	}
	if vres.Superior != nil {
		res.Superior = newSuperior(vres.Superior)
	}
	if vres.Group != nil {
		res.Group = newGroup(vres.Group)
	}
	return res
}

// newUserView projects result type User to projected type UserView using the
// "default" view.
func newUserView(res *User) *authviews.UserView {
	vres := &authviews.UserView{
		ID:       &res.ID,
		Username: &res.Username,
		Name:     &res.Name,
		Mobile:   &res.Mobile,
		Email:    &res.Email,
		Jobs:     &res.Jobs,
		IsAdmin:  &res.IsAdmin,
	}
	if res.Superior != nil {
		vres.Superior = newSuperiorView(res.Superior)
	}
	if res.Group != nil {
		vres.Group = newGroupView(res.Group)
	}
	return vres
}

// newSuperior converts projected type Superior to service type Superior.
func newSuperior(vres *authviews.SuperiorView) *Superior {
	res := &Superior{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newSuperiorView projects result type Superior to projected type SuperiorView
// using the "default" view.
func newSuperiorView(res *Superior) *authviews.SuperiorView {
	vres := &authviews.SuperiorView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newGroup converts projected type Group to service type Group.
func newGroup(vres *authviews.GroupView) *Group {
	res := &Group{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newGroupView projects result type Group to projected type GroupView using
// the "default" view.
func newGroupView(res *Group) *authviews.GroupView {
	vres := &authviews.GroupView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newSuccessResult converts projected type SuccessResult to service type
// SuccessResult.
func newSuccessResult(vres *authviews.SuccessResultView) *SuccessResult {
	res := &SuccessResult{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessResultView projects result type SuccessResult to projected type
// SuccessResultView using the "default" view.
func newSuccessResultView(res *SuccessResult) *authviews.SuccessResultView {
	vres := &authviews.SuccessResultView{
		OK: &res.OK,
	}
	return vres
}

// newCaptcha converts projected type Captcha to service type Captcha.
func newCaptcha(vres *authviews.CaptchaView) *Captcha {
	res := &Captcha{}
	if vres.Image != nil {
		res.Image = *vres.Image
	}
	if vres.CaptchaID != nil {
		res.CaptchaID = *vres.CaptchaID
	}
	return res
}

// newCaptchaView projects result type Captcha to projected type CaptchaView
// using the "default" view.
func newCaptchaView(res *Captcha) *authviews.CaptchaView {
	vres := &authviews.CaptchaView{
		Image:     &res.Image,
		CaptchaID: &res.CaptchaID,
	}
	return vres
}

// transformAuthviewsCredentialsViewToCredentials builds a value of type
// *Credentials from a value of type *authviews.CredentialsView.
func transformAuthviewsCredentialsViewToCredentials(v *authviews.CredentialsView) *Credentials {
	if v == nil {
		return nil
	}
	res := &Credentials{
		Token:     *v.Token,
		ExpiresIn: *v.ExpiresIn,
	}

	return res
}

// transformCredentialsToAuthviewsCredentialsView builds a value of type
// *authviews.CredentialsView from a value of type *Credentials.
func transformCredentialsToAuthviewsCredentialsView(v *Credentials) *authviews.CredentialsView {
	res := &authviews.CredentialsView{
		Token:     &v.Token,
		ExpiresIn: &v.ExpiresIn,
	}

	return res
}
