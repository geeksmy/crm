// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Procurement HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	procurement "crm/gen/procurement"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Procurement Get endpoint from CLI
// flags.
func BuildGetPayload(procurementGetID string, procurementGetToken string) (*procurement.GetPayload, error) {
	var id string
	{
		id = procurementGetID
	}
	var token string
	{
		token = procurementGetToken
	}
	v := &procurement.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Procurement List endpoint from
// CLI flags.
func BuildListPayload(procurementListCursor string, procurementListLimit string, procurementListToken string) (*procurement.ListPayload, error) {
	var err error
	var cursor *int
	{
		if procurementListCursor != "" {
			var v int64
			v, err = strconv.ParseInt(procurementListCursor, 10, 64)
			val := int(v)
			cursor = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for cursor, must be INT")
			}
		}
	}
	var limit *int
	{
		if procurementListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(procurementListLimit, 10, 64)
			val := int(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
		}
	}
	var token string
	{
		token = procurementListToken
	}
	v := &procurement.ListPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Procurement Update endpoint
// from CLI flags.
func BuildUpdatePayload(procurementUpdateBody string, procurementUpdateToken string) (*procurement.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(procurementUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"123asd123123asd\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"is_sales_return\": false,\n      \"money\": 123,\n      \"note\": \"备注\"\n   }'")
		}
		if body.IsSalesReturn != nil {
			if !(*body.IsSalesReturn == false || *body.IsSalesReturn == true) {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.is_sales_return", *body.IsSalesReturn, []interface{}{false, true}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = procurementUpdateToken
	}
	v := &procurement.UpdatePayload{
		ID:            body.ID,
		Code:          body.Code,
		Money:         body.Money,
		IsSalesReturn: body.IsSalesReturn,
		Note:          body.Note,
		HeadID:        body.HeadID,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Procurement Create endpoint
// from CLI flags.
func BuildCreatePayload(procurementCreateBody string, procurementCreateToken string) (*procurement.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(procurementCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"123asd123123asd\",\n      \"founder_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"is_sales_return\": false,\n      \"money\": 123,\n      \"note\": \"备注\",\n      \"supplier_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\"\n   }'")
		}
		if !(body.IsSalesReturn == false || body.IsSalesReturn == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.is_sales_return", body.IsSalesReturn, []interface{}{false, true}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = procurementCreateToken
	}
	v := &procurement.CreatePayload{
		SupplierID:    body.SupplierID,
		Code:          body.Code,
		Money:         body.Money,
		IsSalesReturn: body.IsSalesReturn,
		Note:          body.Note,
		HeadID:        body.HeadID,
		FounderID:     body.FounderID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Procurement Delete endpoint
// from CLI flags.
func BuildDeletePayload(procurementDeleteBody string, procurementDeleteToken string) (*procurement.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(procurementDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = procurementDeleteToken
	}
	v := &procurement.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
