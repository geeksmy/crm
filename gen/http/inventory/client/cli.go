// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Inventory HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	inventory "crm/gen/inventory"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Inventory Get endpoint from CLI
// flags.
func BuildGetPayload(inventoryGetID string, inventoryGetToken string) (*inventory.GetPayload, error) {
	var id string
	{
		id = inventoryGetID
	}
	var token string
	{
		token = inventoryGetToken
	}
	v := &inventory.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Inventory List endpoint from CLI
// flags.
func BuildListPayload(inventoryListToken string) (*inventory.ListPayload, error) {
	var token string
	{
		token = inventoryListToken
	}
	v := &inventory.ListPayload{}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Inventory Update endpoint from
// CLI flags.
func BuildUpdatePayload(inventoryUpdateBody string, inventoryUpdateToken string) (*inventory.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(inventoryUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"123qwe123qwe\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"in_and_out\": 1,\n      \"inventory_date\": \"20210101\",\n      \"note\": \"备注\",\n      \"number\": 123,\n      \"product_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"type\": 1,\n      \"warehouse_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\"\n   }'")
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if !(body.InAndOut == 1 || body.InAndOut == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.in_and_out", body.InAndOut, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = inventoryUpdateToken
	}
	v := &inventory.UpdatePayload{
		ID:            body.ID,
		ProductID:     body.ProductID,
		Number:        body.Number,
		Code:          body.Code,
		WarehouseID:   body.WarehouseID,
		Type:          body.Type,
		InventoryDate: body.InventoryDate,
		InAndOut:      body.InAndOut,
		Note:          body.Note,
		HeadID:        body.HeadID,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Inventory Create endpoint from
// CLI flags.
func BuildCreatePayload(inventoryCreateBody string, inventoryCreateToken string) (*inventory.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(inventoryCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"123qwe123qwe\",\n      \"founder_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"in_and_out\": 1,\n      \"inventory_date\": \"20210101\",\n      \"note\": \"备注\",\n      \"number\": 123,\n      \"product_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"type\": 1,\n      \"warehouse_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\"\n   }'")
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if !(body.InAndOut == 1 || body.InAndOut == 2) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.in_and_out", body.InAndOut, []interface{}{1, 2}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = inventoryCreateToken
	}
	v := &inventory.CreatePayload{
		ProductID:     body.ProductID,
		Number:        body.Number,
		Code:          body.Code,
		WarehouseID:   body.WarehouseID,
		Type:          body.Type,
		InventoryDate: body.InventoryDate,
		InAndOut:      body.InAndOut,
		Note:          body.Note,
		HeadID:        body.HeadID,
		FounderID:     body.FounderID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Inventory Delete endpoint from
// CLI flags.
func BuildDeletePayload(inventoryDeleteBody string, inventoryDeleteToken string) (*inventory.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(inventoryDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = inventoryDeleteToken
	}
	v := &inventory.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
