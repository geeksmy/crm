// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User HTTP client types
//
// Command:
// $ goa gen crm/design

package client

import (
	user "crm/gen/user"
	userviews "crm/gen/user/views"

	goa "goa.design/goa/v3/pkg"
)

// UpdateRequestBody is the type of the "User" service "Update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// 用户ID
	ID string `form:"id" json:"id" xml:"id"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 直属上级ID
	SuperiorID *string `form:"superior_id,omitempty" json:"superior_id,omitempty" xml:"superior_id,omitempty"`
	// 所属组
	GroupID *string `form:"group_id,omitempty" json:"group_id,omitempty" xml:"group_id,omitempty"`
}

// CreateRequestBody is the type of the "User" service "Create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 用户密码
	Password string `form:"password" json:"password" xml:"password"`
	// 姓名
	Name string `form:"name" json:"name" xml:"name"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 邮箱
	Email string `form:"email" json:"email" xml:"email"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs int `form:"jobs" json:"jobs" xml:"jobs"`
	// 是否是管理员
	IsAdmin bool `form:"is_admin" json:"is_admin" xml:"is_admin"`
	// 直属上级ID
	SuperiorID string `form:"superior_id" json:"superior_id" xml:"superior_id"`
	// 所属组
	GroupID string `form:"group_id" json:"group_id" xml:"group_id"`
}

// DeleteRequestBody is the type of the "User" service "Delete" endpoint HTTP
// request body.
type DeleteRequestBody struct {
	Ids []string `form:"ids" json:"ids" xml:"ids"`
}

// GetResponseBody is the type of the "User" service "Get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 是否是管理员
	IsAdmin *bool `form:"is_admin,omitempty" json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior,omitempty" json:"superior,omitempty" xml:"superior,omitempty"`
	// 所属组
	Group *GroupResponseBody `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
}

// ListResponseBody is the type of the "User" service "List" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*UserResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// 下一页游标
	NextCursor *int `form:"nextCursor,omitempty" json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// 总记录数
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// UpdateResponseBody is the type of the "User" service "Update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 是否是管理员
	IsAdmin *bool `form:"is_admin,omitempty" json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior,omitempty" json:"superior,omitempty" xml:"superior,omitempty"`
	// 所属组
	Group *GroupResponseBody `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
}

// CreateResponseBody is the type of the "User" service "Create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 是否是管理员
	IsAdmin *bool `form:"is_admin,omitempty" json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior,omitempty" json:"superior,omitempty" xml:"superior,omitempty"`
	// 所属组
	Group *GroupResponseBody `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
}

// DeleteResponseBody is the type of the "User" service "Delete" endpoint HTTP
// response body.
type DeleteResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// GetInternalServerErrorResponseBody is the type of the "User" service "Get"
// endpoint HTTP response body for the "internal_server_error" error.
type GetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBadRequestResponseBody is the type of the "User" service "Get" endpoint
// HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListInternalServerErrorResponseBody is the type of the "User" service "List"
// endpoint HTTP response body for the "internal_server_error" error.
type ListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBadRequestResponseBody is the type of the "User" service "List" endpoint
// HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInternalServerErrorResponseBody is the type of the "User" service
// "Update" endpoint HTTP response body for the "internal_server_error" error.
type UpdateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "User" service "Update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInternalServerErrorResponseBody is the type of the "User" service
// "Create" endpoint HTTP response body for the "internal_server_error" error.
type CreateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "User" service "Create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteInternalServerErrorResponseBody is the type of the "User" service
// "Delete" endpoint HTTP response body for the "internal_server_error" error.
type DeleteInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "User" service "Delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// SuperiorResponseBody is used to define fields on response body types.
type SuperiorResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GroupResponseBody is used to define fields on response body types.
type GroupResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 组名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 是否是管理员
	IsAdmin *bool `form:"is_admin,omitempty" json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior,omitempty" json:"superior,omitempty" xml:"superior,omitempty"`
	// 所属组
	Group *GroupResponseBody `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "Update" endpoint of the "User" service.
func NewUpdateRequestBody(p *user.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		ID:         p.ID,
		Name:       p.Name,
		Mobile:     p.Mobile,
		Email:      p.Email,
		Jobs:       p.Jobs,
		SuperiorID: p.SuperiorID,
		GroupID:    p.GroupID,
	}
	return body
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "Create" endpoint of the "User" service.
func NewCreateRequestBody(p *user.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Username:   p.Username,
		Password:   p.Password,
		Name:       p.Name,
		Mobile:     p.Mobile,
		Email:      p.Email,
		Jobs:       p.Jobs,
		IsAdmin:    p.IsAdmin,
		SuperiorID: p.SuperiorID,
		GroupID:    p.GroupID,
	}
	return body
}

// NewDeleteRequestBody builds the HTTP request body from the payload of the
// "Delete" endpoint of the "User" service.
func NewDeleteRequestBody(p *user.DeletePayload) *DeleteRequestBody {
	body := &DeleteRequestBody{}
	if p.Ids != nil {
		body.Ids = make([]string, len(p.Ids))
		for i, val := range p.Ids {
			body.Ids[i] = val
		}
	}
	return body
}

// NewGetUserOK builds a "User" service "Get" endpoint result from a HTTP "OK"
// response.
func NewGetUserOK(body *GetResponseBody) *userviews.UserView {
	v := &userviews.UserView{
		ID:       body.ID,
		Username: body.Username,
		Name:     body.Name,
		Mobile:   body.Mobile,
		Email:    body.Email,
		Jobs:     body.Jobs,
		IsAdmin:  body.IsAdmin,
	}
	v.Superior = unmarshalSuperiorResponseBodyToUserviewsSuperiorView(body.Superior)
	v.Group = unmarshalGroupResponseBodyToUserviewsGroupView(body.Group)

	return v
}

// NewGetInternalServerError builds a User service Get endpoint
// internal_server_error error.
func NewGetInternalServerError(body *GetInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBadRequest builds a User service Get endpoint bad_request error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListResultOK builds a "User" service "List" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *user.ListResult {
	v := &user.ListResult{
		NextCursor: *body.NextCursor,
		Total:      *body.Total,
	}
	v.Items = make([]*user.User, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalUserResponseBodyToUserUser(val)
	}

	return v
}

// NewListInternalServerError builds a User service List endpoint
// internal_server_error error.
func NewListInternalServerError(body *ListInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBadRequest builds a User service List endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateUserOK builds a "User" service "Update" endpoint result from a HTTP
// "OK" response.
func NewUpdateUserOK(body *UpdateResponseBody) *userviews.UserView {
	v := &userviews.UserView{
		ID:       body.ID,
		Username: body.Username,
		Name:     body.Name,
		Mobile:   body.Mobile,
		Email:    body.Email,
		Jobs:     body.Jobs,
		IsAdmin:  body.IsAdmin,
	}
	v.Superior = unmarshalSuperiorResponseBodyToUserviewsSuperiorView(body.Superior)
	v.Group = unmarshalGroupResponseBodyToUserviewsGroupView(body.Group)

	return v
}

// NewUpdateInternalServerError builds a User service Update endpoint
// internal_server_error error.
func NewUpdateInternalServerError(body *UpdateInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadRequest builds a User service Update endpoint bad_request error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateUserOK builds a "User" service "Create" endpoint result from a HTTP
// "OK" response.
func NewCreateUserOK(body *CreateResponseBody) *userviews.UserView {
	v := &userviews.UserView{
		ID:       body.ID,
		Username: body.Username,
		Name:     body.Name,
		Mobile:   body.Mobile,
		Email:    body.Email,
		Jobs:     body.Jobs,
		IsAdmin:  body.IsAdmin,
	}
	v.Superior = unmarshalSuperiorResponseBodyToUserviewsSuperiorView(body.Superior)
	v.Group = unmarshalGroupResponseBodyToUserviewsGroupView(body.Group)

	return v
}

// NewCreateInternalServerError builds a User service Create endpoint
// internal_server_error error.
func NewCreateInternalServerError(body *CreateInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBadRequest builds a User service Create endpoint bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteSuccessResultOK builds a "User" service "Delete" endpoint result
// from a HTTP "OK" response.
func NewDeleteSuccessResultOK(body *DeleteResponseBody) *userviews.SuccessResultView {
	v := &userviews.SuccessResultView{
		OK: body.OK,
	}

	return v
}

// NewDeleteInternalServerError builds a User service Delete endpoint
// internal_server_error error.
func NewDeleteInternalServerError(body *DeleteInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBadRequest builds a User service Delete endpoint bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.NextCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nextCursor", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateUserResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// Get_internal_server_error_Response_Body
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// Get_bad_request_Response_Body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListInternalServerErrorResponseBody runs the validations defined on
// List_internal_server_error_Response_Body
func ValidateListInternalServerErrorResponseBody(body *ListInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// List_bad_request_Response_Body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on Update_internal_server_error_Response_Body
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// Update_bad_request_Response_Body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on Create_internal_server_error_Response_Body
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// Create_bad_request_Response_Body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteInternalServerErrorResponseBody runs the validations defined
// on Delete_internal_server_error_Response_Body
func ValidateDeleteInternalServerErrorResponseBody(body *DeleteInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// Delete_bad_request_Response_Body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateSuperiorResponseBody runs the validations defined on
// SuperiorResponseBody
func ValidateSuperiorResponseBody(body *SuperiorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGroupResponseBody runs the validations defined on GroupResponseBody
func ValidateGroupResponseBody(body *GroupResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "body"))
	}
	if body.IsAdmin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_admin", "body"))
	}
	if body.Superior == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("superior", "body"))
	}
	if body.Group == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("group", "body"))
	}
	if body.Jobs != nil {
		if !(*body.Jobs == 1 || *body.Jobs == 2 || *body.Jobs == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.jobs", *body.Jobs, []interface{}{1, 2, 3}))
		}
	}
	if body.Superior != nil {
		if err2 := ValidateSuperiorResponseBody(body.Superior); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Group != nil {
		if err2 := ValidateGroupResponseBody(body.Group); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
