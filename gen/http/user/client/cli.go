// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	user "crm/gen/user"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildLoginByUsernamePayload builds the payload for the User LoginByUsername
// endpoint from CLI flags.
func BuildLoginByUsernamePayload(userLoginByUsernameBody string) (*user.LoginByUsernamePayload, error) {
	var err error
	var body LoginByUsernameRequestBody
	{
		err = json.Unmarshal([]byte(userLoginByUsernameBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"captchaId\": \"ge\",\n      \"humanCode\": \"j8t\",\n      \"password\": \"password\",\n      \"username\": \"user\"\n   }'")
		}
		if utf8.RuneCountInString(body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 1, true))
		}
		if utf8.RuneCountInString(body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", body.Username, utf8.RuneCountInString(body.Username), 128, false))
		}
		if utf8.RuneCountInString(body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 1, true))
		}
		if utf8.RuneCountInString(body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", body.Password, utf8.RuneCountInString(body.Password), 128, false))
		}
		if utf8.RuneCountInString(body.HumanCode) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", body.HumanCode, utf8.RuneCountInString(body.HumanCode), 4, true))
		}
		if utf8.RuneCountInString(body.HumanCode) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", body.HumanCode, utf8.RuneCountInString(body.HumanCode), 8, false))
		}
		if utf8.RuneCountInString(body.CaptchaID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", body.CaptchaID, utf8.RuneCountInString(body.CaptchaID), 1, true))
		}
		if utf8.RuneCountInString(body.CaptchaID) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", body.CaptchaID, utf8.RuneCountInString(body.CaptchaID), 128, false))
		}
		if err != nil {
			return nil, err
		}
	}
	v := &user.LoginByUsernamePayload{
		Username:  body.Username,
		Password:  body.Password,
		HumanCode: body.HumanCode,
		CaptchaID: body.CaptchaID,
	}
	{
		var zero string
		if v.HumanCode == zero {
			v.HumanCode = ""
		}
	}
	{
		var zero string
		if v.CaptchaID == zero {
			v.CaptchaID = ""
		}
	}

	return v, nil
}

// BuildUpdatePasswordPayload builds the payload for the User UpdatePassword
// endpoint from CLI flags.
func BuildUpdatePasswordPayload(userUpdatePasswordBody string, userUpdatePasswordToken string) (*user.UpdatePasswordPayload, error) {
	var err error
	var body UpdatePasswordRequestBody
	{
		err = json.Unmarshal([]byte(userUpdatePasswordBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"new_password\": \"abc123\",\n      \"old_password\": \"123abc\"\n   }'")
		}
		if utf8.RuneCountInString(body.OldPassword) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", body.OldPassword, utf8.RuneCountInString(body.OldPassword), 1, true))
		}
		if utf8.RuneCountInString(body.OldPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", body.OldPassword, utf8.RuneCountInString(body.OldPassword), 128, false))
		}
		if utf8.RuneCountInString(body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", body.NewPassword, utf8.RuneCountInString(body.NewPassword), 6, true))
		}
		if utf8.RuneCountInString(body.NewPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", body.NewPassword, utf8.RuneCountInString(body.NewPassword), 128, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = userUpdatePasswordToken
	}
	v := &user.UpdatePasswordPayload{
		OldPassword: body.OldPassword,
		NewPassword: body.NewPassword,
	}
	v.Token = token

	return v, nil
}
