// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	user "crm/gen/user"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the User Get endpoint from CLI flags.
func BuildGetPayload(userGetID string, userGetToken string) (*user.GetPayload, error) {
	var id string
	{
		id = userGetID
	}
	var token string
	{
		token = userGetToken
	}
	v := &user.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the User List endpoint from CLI
// flags.
func BuildListPayload(userListToken string) (*user.ListPayload, error) {
	var token string
	{
		token = userListToken
	}
	v := &user.ListPayload{}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the User Update endpoint from CLI
// flags.
func BuildUpdatePayload(userUpdateBody string, userUpdateToken string) (*user.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(userUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"adb@adb.com\",\n      \"group_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"jobs\": 1,\n      \"mobile\": \"1808001010\",\n      \"name\": \"张三\",\n      \"superior_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mobile", body.Mobile, goa.FormatRegexp))

		err = goa.MergeErrors(err, goa.ValidatePattern("body.mobile", body.Mobile, "^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d)\\d{8}$"))
		if utf8.RuneCountInString(body.Mobile) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", body.Mobile, utf8.RuneCountInString(body.Mobile), 11, true))
		}
		if utf8.RuneCountInString(body.Mobile) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", body.Mobile, utf8.RuneCountInString(body.Mobile), 11, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if !(body.Jobs == 1 || body.Jobs == 2 || body.Jobs == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.jobs", body.Jobs, []interface{}{1, 2, 3}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = userUpdateToken
	}
	v := &user.UpdatePayload{
		ID:         body.ID,
		Name:       body.Name,
		Mobile:     body.Mobile,
		Email:      body.Email,
		Jobs:       body.Jobs,
		SuperiorID: body.SuperiorID,
		GroupID:    body.GroupID,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the User Create endpoint from CLI
// flags.
func BuildCreatePayload(userCreateBody string, userCreateToken string) (*user.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(userCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"email\": \"adb@adb.com\",\n      \"group_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"jobs\": 1,\n      \"mobile\": \"1808001010\",\n      \"name\": \"张三\",\n      \"password\": \"abc\",\n      \"superior_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"username\": \"abc\"\n   }'")
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("body.username", body.Username, "(\\d+.*[a-zA-Z]+)|([a-zA-Z]+.*\\d+)"))
		err = goa.MergeErrors(err, goa.ValidateFormat("body.mobile", body.Mobile, goa.FormatRegexp))

		err = goa.MergeErrors(err, goa.ValidatePattern("body.mobile", body.Mobile, "^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d)\\d{8}$"))
		if utf8.RuneCountInString(body.Mobile) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", body.Mobile, utf8.RuneCountInString(body.Mobile), 11, true))
		}
		if utf8.RuneCountInString(body.Mobile) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.mobile", body.Mobile, utf8.RuneCountInString(body.Mobile), 11, false))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.email", body.Email, goa.FormatEmail))

		if !(body.Jobs == 1 || body.Jobs == 2 || body.Jobs == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.jobs", body.Jobs, []interface{}{1, 2, 3}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = userCreateToken
	}
	v := &user.CreatePayload{
		Username:   body.Username,
		Password:   body.Password,
		Name:       body.Name,
		Mobile:     body.Mobile,
		Email:      body.Email,
		Jobs:       body.Jobs,
		SuperiorID: body.SuperiorID,
		GroupID:    body.GroupID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the User Delete endpoint from CLI
// flags.
func BuildDeletePayload(userDeleteBody string, userDeleteToken string) (*user.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(userDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = userDeleteToken
	}
	v := &user.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
