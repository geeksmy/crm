// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User HTTP server types
//
// Command:
// $ goa gen crm/design

package server

import (
	user "crm/gen/user"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// LoginByUsernameRequestBody is the type of the "User" service
// "LoginByUsername" endpoint HTTP request body.
type LoginByUsernameRequestBody struct {
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 密码
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// 图形验证码
	HumanCode *string `form:"humanCode,omitempty" json:"humanCode,omitempty" xml:"humanCode,omitempty"`
	// 图形验证码ID
	CaptchaID *string `form:"captchaId,omitempty" json:"captchaId,omitempty" xml:"captchaId,omitempty"`
}

// UpdatePasswordRequestBody is the type of the "User" service "UpdatePassword"
// endpoint HTTP request body.
type UpdatePasswordRequestBody struct {
	OldPassword *string `form:"old_password,omitempty" json:"old_password,omitempty" xml:"old_password,omitempty"`
	NewPassword *string `form:"new_password,omitempty" json:"new_password,omitempty" xml:"new_password,omitempty"`
}

// LoginByUsernameResponseBody is the type of the "User" service
// "LoginByUsername" endpoint HTTP response body.
type LoginByUsernameResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string               `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *SessionResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// UpdatePasswordResponseBody is the type of the "User" service
// "UpdatePassword" endpoint HTTP response body.
type UpdatePasswordResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string                     `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *SuccessResultResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// GetCaptchaImageResponseBody is the type of the "User" service
// "GetCaptchaImage" endpoint HTTP response body.
type GetCaptchaImageResponseBody struct {
	// 错误码
	Errcode int `form:"errcode" json:"errcode" xml:"errcode"`
	// 错误消息
	Errmsg string               `form:"errmsg" json:"errmsg" xml:"errmsg"`
	Data   *CaptchaResponseBody `form:"data,omitempty" json:"data,omitempty" xml:"data,omitempty"`
}

// LoginByUsernameInternalServerErrorResponseBody is the type of the "User"
// service "LoginByUsername" endpoint HTTP response body for the
// "internal_server_error" error.
type LoginByUsernameInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginByUsernameBadRequestResponseBody is the type of the "User" service
// "LoginByUsername" endpoint HTTP response body for the "bad_request" error.
type LoginByUsernameBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePasswordInternalServerErrorResponseBody is the type of the "User"
// service "UpdatePassword" endpoint HTTP response body for the
// "internal_server_error" error.
type UpdatePasswordInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePasswordBadRequestResponseBody is the type of the "User" service
// "UpdatePassword" endpoint HTTP response body for the "bad_request" error.
type UpdatePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCaptchaImageInternalServerErrorResponseBody is the type of the "User"
// service "GetCaptchaImage" endpoint HTTP response body for the
// "internal_server_error" error.
type GetCaptchaImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetCaptchaImageBadRequestResponseBody is the type of the "User" service
// "GetCaptchaImage" endpoint HTTP response body for the "bad_request" error.
type GetCaptchaImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// SessionResponseBody is used to define fields on response body types.
type SessionResponseBody struct {
	User        *UserResponseBody        `form:"user" json:"user" xml:"user"`
	Credentials *CredentialsResponseBody `form:"credentials" json:"credentials" xml:"credentials"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// SuccessResultResponseBody is used to define fields on response body types.
type SuccessResultResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// CaptchaResponseBody is used to define fields on response body types.
type CaptchaResponseBody struct {
	// 图片base64
	Image string `form:"image" json:"image" xml:"image"`
	// 验证码ID
	CaptchaID string `form:"captchaId" json:"captchaId" xml:"captchaId"`
}

// NewLoginByUsernameResponseBody builds the HTTP response body from the result
// of the "LoginByUsername" endpoint of the "User" service.
func NewLoginByUsernameResponseBody(res *user.LoginByUsernameResult) *LoginByUsernameResponseBody {
	body := &LoginByUsernameResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalUserSessionToSessionResponseBody(res.Data)
	}
	return body
}

// NewUpdatePasswordResponseBody builds the HTTP response body from the result
// of the "UpdatePassword" endpoint of the "User" service.
func NewUpdatePasswordResponseBody(res *user.UpdatePasswordResult) *UpdatePasswordResponseBody {
	body := &UpdatePasswordResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalUserSuccessResultToSuccessResultResponseBody(res.Data)
	}
	return body
}

// NewGetCaptchaImageResponseBody builds the HTTP response body from the result
// of the "GetCaptchaImage" endpoint of the "User" service.
func NewGetCaptchaImageResponseBody(res *user.GetCaptchaImageResult) *GetCaptchaImageResponseBody {
	body := &GetCaptchaImageResponseBody{
		Errcode: res.Errcode,
		Errmsg:  res.Errmsg,
	}
	if res.Data != nil {
		body.Data = marshalUserCaptchaToCaptchaResponseBody(res.Data)
	}
	return body
}

// NewLoginByUsernameInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "LoginByUsername" endpoint of the "User" service.
func NewLoginByUsernameInternalServerErrorResponseBody(res *goa.ServiceError) *LoginByUsernameInternalServerErrorResponseBody {
	body := &LoginByUsernameInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginByUsernameBadRequestResponseBody builds the HTTP response body from
// the result of the "LoginByUsername" endpoint of the "User" service.
func NewLoginByUsernameBadRequestResponseBody(res *goa.ServiceError) *LoginByUsernameBadRequestResponseBody {
	body := &LoginByUsernameBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePasswordInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "UpdatePassword" endpoint of the "User" service.
func NewUpdatePasswordInternalServerErrorResponseBody(res *goa.ServiceError) *UpdatePasswordInternalServerErrorResponseBody {
	body := &UpdatePasswordInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "UpdatePassword" endpoint of the "User" service.
func NewUpdatePasswordBadRequestResponseBody(res *goa.ServiceError) *UpdatePasswordBadRequestResponseBody {
	body := &UpdatePasswordBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCaptchaImageInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "GetCaptchaImage" endpoint of the "User" service.
func NewGetCaptchaImageInternalServerErrorResponseBody(res *goa.ServiceError) *GetCaptchaImageInternalServerErrorResponseBody {
	body := &GetCaptchaImageInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetCaptchaImageBadRequestResponseBody builds the HTTP response body from
// the result of the "GetCaptchaImage" endpoint of the "User" service.
func NewGetCaptchaImageBadRequestResponseBody(res *goa.ServiceError) *GetCaptchaImageBadRequestResponseBody {
	body := &GetCaptchaImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginByUsernamePayload builds a User service LoginByUsername endpoint
// payload.
func NewLoginByUsernamePayload(body *LoginByUsernameRequestBody) *user.LoginByUsernamePayload {
	v := &user.LoginByUsernamePayload{
		Username: *body.Username,
		Password: *body.Password,
	}
	if body.HumanCode != nil {
		v.HumanCode = *body.HumanCode
	}
	if body.CaptchaID != nil {
		v.CaptchaID = *body.CaptchaID
	}
	if body.HumanCode == nil {
		v.HumanCode = ""
	}
	if body.CaptchaID == nil {
		v.CaptchaID = ""
	}

	return v
}

// NewUpdatePasswordPayload builds a User service UpdatePassword endpoint
// payload.
func NewUpdatePasswordPayload(body *UpdatePasswordRequestBody, token string) *user.UpdatePasswordPayload {
	v := &user.UpdatePasswordPayload{
		OldPassword: *body.OldPassword,
		NewPassword: *body.NewPassword,
	}
	v.Token = token

	return v
}

// ValidateLoginByUsernameRequestBody runs the validations defined on
// LoginByUsernameRequestBody
func ValidateLoginByUsernameRequestBody(body *LoginByUsernameRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 128, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 128, false))
		}
	}
	if body.HumanCode != nil {
		if utf8.RuneCountInString(*body.HumanCode) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", *body.HumanCode, utf8.RuneCountInString(*body.HumanCode), 4, true))
		}
	}
	if body.HumanCode != nil {
		if utf8.RuneCountInString(*body.HumanCode) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", *body.HumanCode, utf8.RuneCountInString(*body.HumanCode), 8, false))
		}
	}
	if body.CaptchaID != nil {
		if utf8.RuneCountInString(*body.CaptchaID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", *body.CaptchaID, utf8.RuneCountInString(*body.CaptchaID), 1, true))
		}
	}
	if body.CaptchaID != nil {
		if utf8.RuneCountInString(*body.CaptchaID) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", *body.CaptchaID, utf8.RuneCountInString(*body.CaptchaID), 128, false))
		}
	}
	return
}

// ValidateUpdatePasswordRequestBody runs the validations defined on
// UpdatePasswordRequestBody
func ValidateUpdatePasswordRequestBody(body *UpdatePasswordRequestBody) (err error) {
	if body.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("old_password", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_password", "body"))
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 1, true))
		}
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 128, false))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 6, true))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 128, false))
		}
	}
	return
}
