// Code generated by goa v3.2.6, DO NOT EDIT.
//
// User HTTP server
//
// Command:
// $ goa gen crm/design

package server

import (
	"context"
	user "crm/gen/user"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the User service endpoint HTTP handlers.
type Server struct {
	Mounts          []*MountPoint
	LoginByUsername http.Handler
	UpdatePassword  http.Handler
	GetCaptchaImage http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the User service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *user.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"LoginByUsername", "POST", "/api/user/login_by_username"},
			{"UpdatePassword", "POST", "/api/user/update_password"},
			{"GetCaptchaImage", "POST", "/api/user/get_captcha_image"},
		},
		LoginByUsername: NewLoginByUsernameHandler(e.LoginByUsername, mux, decoder, encoder, errhandler, formatter),
		UpdatePassword:  NewUpdatePasswordHandler(e.UpdatePassword, mux, decoder, encoder, errhandler, formatter),
		GetCaptchaImage: NewGetCaptchaImageHandler(e.GetCaptchaImage, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "User" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.LoginByUsername = m(s.LoginByUsername)
	s.UpdatePassword = m(s.UpdatePassword)
	s.GetCaptchaImage = m(s.GetCaptchaImage)
}

// Mount configures the mux to serve the User endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountLoginByUsernameHandler(mux, h.LoginByUsername)
	MountUpdatePasswordHandler(mux, h.UpdatePassword)
	MountGetCaptchaImageHandler(mux, h.GetCaptchaImage)
}

// MountLoginByUsernameHandler configures the mux to serve the "User" service
// "LoginByUsername" endpoint.
func MountLoginByUsernameHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/user/login_by_username", f)
}

// NewLoginByUsernameHandler creates a HTTP handler which loads the HTTP
// request and calls the "User" service "LoginByUsername" endpoint.
func NewLoginByUsernameHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeLoginByUsernameRequest(mux, decoder)
		encodeResponse = EncodeLoginByUsernameResponse(encoder)
		encodeError    = EncodeLoginByUsernameError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "LoginByUsername")
		ctx = context.WithValue(ctx, goa.ServiceKey, "User")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountUpdatePasswordHandler configures the mux to serve the "User" service
// "UpdatePassword" endpoint.
func MountUpdatePasswordHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/user/update_password", f)
}

// NewUpdatePasswordHandler creates a HTTP handler which loads the HTTP request
// and calls the "User" service "UpdatePassword" endpoint.
func NewUpdatePasswordHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeUpdatePasswordRequest(mux, decoder)
		encodeResponse = EncodeUpdatePasswordResponse(encoder)
		encodeError    = EncodeUpdatePasswordError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "UpdatePassword")
		ctx = context.WithValue(ctx, goa.ServiceKey, "User")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetCaptchaImageHandler configures the mux to serve the "User" service
// "GetCaptchaImage" endpoint.
func MountGetCaptchaImageHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/api/user/get_captcha_image", f)
}

// NewGetCaptchaImageHandler creates a HTTP handler which loads the HTTP
// request and calls the "User" service "GetCaptchaImage" endpoint.
func NewGetCaptchaImageHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetCaptchaImageResponse(encoder)
		encodeError    = EncodeGetCaptchaImageError(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "GetCaptchaImage")
		ctx = context.WithValue(ctx, goa.ServiceKey, "User")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
