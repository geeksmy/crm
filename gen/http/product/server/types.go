// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Product HTTP server types
//
// Command:
// $ goa gen crm/design

package server

import (
	product "crm/gen/product"
	productviews "crm/gen/product/views"

	goa "goa.design/goa/v3/pkg"
)

// UpdateRequestBody is the type of the "Product" service "Update" endpoint
// HTTP request body.
type UpdateRequestBody struct {
	// 用户ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 产品名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 产品单位
	Unit *int `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// 成本价
	CostPrice *int `form:"cost_price,omitempty" json:"cost_price,omitempty" xml:"cost_price,omitempty"`
	// 市场价
	MarketPrice *int `form:"market_price,omitempty" json:"market_price,omitempty" xml:"market_price,omitempty"`
	// 产品备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 产品图片
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// 产品规格
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// 产品类型
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// 是否上架
	IsShelves *bool `form:"is_shelves,omitempty" json:"is_shelves,omitempty" xml:"is_shelves,omitempty"`
}

// CreateRequestBody is the type of the "Product" service "Create" endpoint
// HTTP request body.
type CreateRequestBody struct {
	// 产品名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 产品单位
	Unit *int `form:"unit,omitempty" json:"unit,omitempty" xml:"unit,omitempty"`
	// 成本价
	CostPrice *int `form:"cost_price,omitempty" json:"cost_price,omitempty" xml:"cost_price,omitempty"`
	// 市场价
	MarketPrice *int `form:"market_price,omitempty" json:"market_price,omitempty" xml:"market_price,omitempty"`
	// 产品备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 产品图片
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// 产品编码
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 产品规格
	Size *string `form:"size,omitempty" json:"size,omitempty" xml:"size,omitempty"`
	// 产品类型
	Type *int `form:"type,omitempty" json:"type,omitempty" xml:"type,omitempty"`
	// 是否上架
	IsShelves *bool `form:"is_shelves,omitempty" json:"is_shelves,omitempty" xml:"is_shelves,omitempty"`
	// 创建人ID
	FounderID *string `form:"founder_id,omitempty" json:"founder_id,omitempty" xml:"founder_id,omitempty"`
}

// DeleteRequestBody is the type of the "Product" service "Delete" endpoint
// HTTP request body.
type DeleteRequestBody struct {
	Ids []string `form:"ids,omitempty" json:"ids,omitempty" xml:"ids,omitempty"`
}

// GetResponseBody is the type of the "Product" service "Get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 产品名
	Name string `form:"name" json:"name" xml:"name"`
	// 产品单位
	Unit int `form:"unit" json:"unit" xml:"unit"`
	// 成本价
	CostPrice int `form:"cost_price" json:"cost_price" xml:"cost_price"`
	// 市场价
	MarketPrice int `form:"market_price" json:"market_price" xml:"market_price"`
	// 产品备注
	Note string `form:"note" json:"note" xml:"note"`
	// 产品图片
	Image string `form:"image" json:"image" xml:"image"`
	// 产品编码
	Code string `form:"code" json:"code" xml:"code"`
	// 产品规格
	Size string `form:"size" json:"size" xml:"size"`
	// 产品类型
	Type int `form:"type" json:"type" xml:"type"`
	// 是否上架
	IsShelves bool `form:"is_shelves" json:"is_shelves" xml:"is_shelves"`
	// 创建人
	Founder *FounderResponseBody `form:"founder" json:"founder" xml:"founder"`
}

// ListResponseBody is the type of the "Product" service "List" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*ProductResponseBody `form:"items" json:"items" xml:"items"`
	// 下一页游标
	NextCursor int `form:"nextCursor" json:"nextCursor" xml:"nextCursor"`
	// 总记录数
	Total int `form:"total" json:"total" xml:"total"`
}

// UpdateResponseBody is the type of the "Product" service "Update" endpoint
// HTTP response body.
type UpdateResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 产品名
	Name string `form:"name" json:"name" xml:"name"`
	// 产品单位
	Unit int `form:"unit" json:"unit" xml:"unit"`
	// 成本价
	CostPrice int `form:"cost_price" json:"cost_price" xml:"cost_price"`
	// 市场价
	MarketPrice int `form:"market_price" json:"market_price" xml:"market_price"`
	// 产品备注
	Note string `form:"note" json:"note" xml:"note"`
	// 产品图片
	Image string `form:"image" json:"image" xml:"image"`
	// 产品编码
	Code string `form:"code" json:"code" xml:"code"`
	// 产品规格
	Size string `form:"size" json:"size" xml:"size"`
	// 产品类型
	Type int `form:"type" json:"type" xml:"type"`
	// 是否上架
	IsShelves bool `form:"is_shelves" json:"is_shelves" xml:"is_shelves"`
	// 创建人
	Founder *FounderResponseBody `form:"founder" json:"founder" xml:"founder"`
}

// CreateResponseBody is the type of the "Product" service "Create" endpoint
// HTTP response body.
type CreateResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 产品名
	Name string `form:"name" json:"name" xml:"name"`
	// 产品单位
	Unit int `form:"unit" json:"unit" xml:"unit"`
	// 成本价
	CostPrice int `form:"cost_price" json:"cost_price" xml:"cost_price"`
	// 市场价
	MarketPrice int `form:"market_price" json:"market_price" xml:"market_price"`
	// 产品备注
	Note string `form:"note" json:"note" xml:"note"`
	// 产品图片
	Image string `form:"image" json:"image" xml:"image"`
	// 产品编码
	Code string `form:"code" json:"code" xml:"code"`
	// 产品规格
	Size string `form:"size" json:"size" xml:"size"`
	// 产品类型
	Type int `form:"type" json:"type" xml:"type"`
	// 是否上架
	IsShelves bool `form:"is_shelves" json:"is_shelves" xml:"is_shelves"`
	// 创建人
	Founder *FounderResponseBody `form:"founder" json:"founder" xml:"founder"`
}

// DeleteResponseBody is the type of the "Product" service "Delete" endpoint
// HTTP response body.
type DeleteResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// GetInternalServerErrorResponseBody is the type of the "Product" service
// "Get" endpoint HTTP response body for the "internal_server_error" error.
type GetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// GetBadRequestResponseBody is the type of the "Product" service "Get"
// endpoint HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListInternalServerErrorResponseBody is the type of the "Product" service
// "List" endpoint HTTP response body for the "internal_server_error" error.
type ListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// ListBadRequestResponseBody is the type of the "Product" service "List"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateInternalServerErrorResponseBody is the type of the "Product" service
// "Update" endpoint HTTP response body for the "internal_server_error" error.
type UpdateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdateBadRequestResponseBody is the type of the "Product" service "Update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateInternalServerErrorResponseBody is the type of the "Product" service
// "Create" endpoint HTTP response body for the "internal_server_error" error.
type CreateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CreateBadRequestResponseBody is the type of the "Product" service "Create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteInternalServerErrorResponseBody is the type of the "Product" service
// "Delete" endpoint HTTP response body for the "internal_server_error" error.
type DeleteInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// DeleteBadRequestResponseBody is the type of the "Product" service "Delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// FounderResponseBody is used to define fields on response body types.
type FounderResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 姓名
	Name string `form:"name" json:"name" xml:"name"`
}

// ProductResponseBody is used to define fields on response body types.
type ProductResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 产品名
	Name string `form:"name" json:"name" xml:"name"`
	// 产品单位
	Unit int `form:"unit" json:"unit" xml:"unit"`
	// 成本价
	CostPrice int `form:"cost_price" json:"cost_price" xml:"cost_price"`
	// 市场价
	MarketPrice int `form:"market_price" json:"market_price" xml:"market_price"`
	// 产品备注
	Note string `form:"note" json:"note" xml:"note"`
	// 产品图片
	Image string `form:"image" json:"image" xml:"image"`
	// 产品编码
	Code string `form:"code" json:"code" xml:"code"`
	// 产品规格
	Size string `form:"size" json:"size" xml:"size"`
	// 产品类型
	Type int `form:"type" json:"type" xml:"type"`
	// 是否上架
	IsShelves bool `form:"is_shelves" json:"is_shelves" xml:"is_shelves"`
	// 创建人
	Founder *FounderResponseBody `form:"founder" json:"founder" xml:"founder"`
}

// NewGetResponseBody builds the HTTP response body from the result of the
// "Get" endpoint of the "Product" service.
func NewGetResponseBody(res *productviews.ProductView) *GetResponseBody {
	body := &GetResponseBody{
		ID:          *res.ID,
		Name:        *res.Name,
		Unit:        *res.Unit,
		CostPrice:   *res.CostPrice,
		MarketPrice: *res.MarketPrice,
		Note:        *res.Note,
		Image:       *res.Image,
		Code:        *res.Code,
		Size:        *res.Size,
		Type:        *res.Type,
		IsShelves:   *res.IsShelves,
	}
	if res.Founder != nil {
		body.Founder = marshalProductviewsFounderViewToFounderResponseBody(res.Founder)
	}
	return body
}

// NewListResponseBody builds the HTTP response body from the result of the
// "List" endpoint of the "Product" service.
func NewListResponseBody(res *product.ListResult) *ListResponseBody {
	body := &ListResponseBody{
		NextCursor: res.NextCursor,
		Total:      res.Total,
	}
	if res.Items != nil {
		body.Items = make([]*ProductResponseBody, len(res.Items))
		for i, val := range res.Items {
			body.Items[i] = marshalProductProductToProductResponseBody(val)
		}
	}
	return body
}

// NewUpdateResponseBody builds the HTTP response body from the result of the
// "Update" endpoint of the "Product" service.
func NewUpdateResponseBody(res *productviews.ProductView) *UpdateResponseBody {
	body := &UpdateResponseBody{
		ID:          *res.ID,
		Name:        *res.Name,
		Unit:        *res.Unit,
		CostPrice:   *res.CostPrice,
		MarketPrice: *res.MarketPrice,
		Note:        *res.Note,
		Image:       *res.Image,
		Code:        *res.Code,
		Size:        *res.Size,
		Type:        *res.Type,
		IsShelves:   *res.IsShelves,
	}
	if res.Founder != nil {
		body.Founder = marshalProductviewsFounderViewToFounderResponseBody(res.Founder)
	}
	return body
}

// NewCreateResponseBody builds the HTTP response body from the result of the
// "Create" endpoint of the "Product" service.
func NewCreateResponseBody(res *productviews.ProductView) *CreateResponseBody {
	body := &CreateResponseBody{
		ID:          *res.ID,
		Name:        *res.Name,
		Unit:        *res.Unit,
		CostPrice:   *res.CostPrice,
		MarketPrice: *res.MarketPrice,
		Note:        *res.Note,
		Image:       *res.Image,
		Code:        *res.Code,
		Size:        *res.Size,
		Type:        *res.Type,
		IsShelves:   *res.IsShelves,
	}
	if res.Founder != nil {
		body.Founder = marshalProductviewsFounderViewToFounderResponseBody(res.Founder)
	}
	return body
}

// NewDeleteResponseBody builds the HTTP response body from the result of the
// "Delete" endpoint of the "Product" service.
func NewDeleteResponseBody(res *productviews.SuccessResultView) *DeleteResponseBody {
	body := &DeleteResponseBody{
		OK: *res.OK,
	}
	return body
}

// NewGetInternalServerErrorResponseBody builds the HTTP response body from the
// result of the "Get" endpoint of the "Product" service.
func NewGetInternalServerErrorResponseBody(res *goa.ServiceError) *GetInternalServerErrorResponseBody {
	body := &GetInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetBadRequestResponseBody builds the HTTP response body from the result
// of the "Get" endpoint of the "Product" service.
func NewGetBadRequestResponseBody(res *goa.ServiceError) *GetBadRequestResponseBody {
	body := &GetBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "List" endpoint of the "Product" service.
func NewListInternalServerErrorResponseBody(res *goa.ServiceError) *ListInternalServerErrorResponseBody {
	body := &ListInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewListBadRequestResponseBody builds the HTTP response body from the result
// of the "List" endpoint of the "Product" service.
func NewListBadRequestResponseBody(res *goa.ServiceError) *ListBadRequestResponseBody {
	body := &ListBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "Update" endpoint of the "Product" service.
func NewUpdateInternalServerErrorResponseBody(res *goa.ServiceError) *UpdateInternalServerErrorResponseBody {
	body := &UpdateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdateBadRequestResponseBody builds the HTTP response body from the
// result of the "Update" endpoint of the "Product" service.
func NewUpdateBadRequestResponseBody(res *goa.ServiceError) *UpdateBadRequestResponseBody {
	body := &UpdateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "Create" endpoint of the "Product" service.
func NewCreateInternalServerErrorResponseBody(res *goa.ServiceError) *CreateInternalServerErrorResponseBody {
	body := &CreateInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCreateBadRequestResponseBody builds the HTTP response body from the
// result of the "Create" endpoint of the "Product" service.
func NewCreateBadRequestResponseBody(res *goa.ServiceError) *CreateBadRequestResponseBody {
	body := &CreateBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "Delete" endpoint of the "Product" service.
func NewDeleteInternalServerErrorResponseBody(res *goa.ServiceError) *DeleteInternalServerErrorResponseBody {
	body := &DeleteInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewDeleteBadRequestResponseBody builds the HTTP response body from the
// result of the "Delete" endpoint of the "Product" service.
func NewDeleteBadRequestResponseBody(res *goa.ServiceError) *DeleteBadRequestResponseBody {
	body := &DeleteBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewGetPayload builds a Product service Get endpoint payload.
func NewGetPayload(id string, token string) *product.GetPayload {
	v := &product.GetPayload{}
	v.ID = id
	v.Token = token

	return v
}

// NewListPayload builds a Product service List endpoint payload.
func NewListPayload(cursor *int, limit *int, token string) *product.ListPayload {
	v := &product.ListPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.Token = token

	return v
}

// NewUpdatePayload builds a Product service Update endpoint payload.
func NewUpdatePayload(body *UpdateRequestBody, token string) *product.UpdatePayload {
	v := &product.UpdatePayload{
		ID:          *body.ID,
		Name:        body.Name,
		Unit:        body.Unit,
		CostPrice:   body.CostPrice,
		MarketPrice: body.MarketPrice,
		Note:        body.Note,
		Image:       body.Image,
		Size:        body.Size,
		Type:        body.Type,
		IsShelves:   body.IsShelves,
	}
	v.Token = token

	return v
}

// NewCreatePayload builds a Product service Create endpoint payload.
func NewCreatePayload(body *CreateRequestBody, token string) *product.CreatePayload {
	v := &product.CreatePayload{
		Name:        *body.Name,
		Unit:        *body.Unit,
		CostPrice:   *body.CostPrice,
		MarketPrice: *body.MarketPrice,
		Note:        *body.Note,
		Image:       *body.Image,
		Code:        *body.Code,
		Size:        *body.Size,
		Type:        *body.Type,
		IsShelves:   *body.IsShelves,
		FounderID:   *body.FounderID,
	}
	v.Token = token

	return v
}

// NewDeletePayload builds a Product service Delete endpoint payload.
func NewDeletePayload(body *DeleteRequestBody, token string) *product.DeletePayload {
	v := &product.DeletePayload{}
	v.Ids = make([]string, len(body.Ids))
	for i, val := range body.Ids {
		v.Ids[i] = val
	}
	v.Token = token

	return v
}

// ValidateUpdateRequestBody runs the validations defined on UpdateRequestBody
func ValidateUpdateRequestBody(body *UpdateRequestBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Unit != nil {
		if !(*body.Unit == 1 || *body.Unit == 2 || *body.Unit == 3 || *body.Unit == 4 || *body.Unit == 5 || *body.Unit == 6 || *body.Unit == 7 || *body.Unit == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2 || *body.Type == 3 || *body.Type == 4 || *body.Type == 5 || *body.Type == 6 || *body.Type == 7 || *body.Type == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	return
}

// ValidateCreateRequestBody runs the validations defined on CreateRequestBody
func ValidateCreateRequestBody(body *CreateRequestBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Unit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unit", "body"))
	}
	if body.CostPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cost_price", "body"))
	}
	if body.MarketPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("market_price", "body"))
	}
	if body.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "body"))
	}
	if body.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "body"))
	}
	if body.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "body"))
	}
	if body.IsShelves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_shelves", "body"))
	}
	if body.FounderID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("founder_id", "body"))
	}
	if body.Unit != nil {
		if !(*body.Unit == 1 || *body.Unit == 2 || *body.Unit == 3 || *body.Unit == 4 || *body.Unit == 5 || *body.Unit == 6 || *body.Unit == 7 || *body.Unit == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", *body.Unit, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	if body.Type != nil {
		if !(*body.Type == 1 || *body.Type == 2 || *body.Type == 3 || *body.Type == 4 || *body.Type == 5 || *body.Type == 6 || *body.Type == 7 || *body.Type == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	return
}

// ValidateDeleteRequestBody runs the validations defined on DeleteRequestBody
func ValidateDeleteRequestBody(body *DeleteRequestBody) (err error) {
	if body.Ids == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
	}
	if len(body.Ids) > 100 {
		err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
	}
	return
}
