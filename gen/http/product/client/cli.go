// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Product HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	product "crm/gen/product"
	"encoding/json"
	"fmt"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Product Get endpoint from CLI
// flags.
func BuildGetPayload(productGetID string, productGetToken string) (*product.GetPayload, error) {
	var id string
	{
		id = productGetID
	}
	var token string
	{
		token = productGetToken
	}
	v := &product.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Product List endpoint from CLI
// flags.
func BuildListPayload(productListToken string) (*product.ListPayload, error) {
	var token string
	{
		token = productListToken
	}
	v := &product.ListPayload{}
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Product Update endpoint from
// CLI flags.
func BuildUpdatePayload(productUpdateBody string, productUpdateToken string) (*product.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(productUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"cost_price\": 123,\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"image\": \"/images/123.jpg\",\n      \"is_shelves\": false,\n      \"market_price\": 123,\n      \"name\": \"灌装辣椒\",\n      \"note\": \"备注\",\n      \"size\": \"瓶\",\n      \"type\": 1,\n      \"unit\": 1\n   }'")
		}
		if !(body.Unit == 1 || body.Unit == 2 || body.Unit == 3 || body.Unit == 4 || body.Unit == 5 || body.Unit == 6 || body.Unit == 7 || body.Unit == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", body.Unit, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3 || body.Type == 4 || body.Type == 5 || body.Type == 6 || body.Type == 7 || body.Type == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = productUpdateToken
	}
	v := &product.UpdatePayload{
		ID:          body.ID,
		Name:        body.Name,
		Unit:        body.Unit,
		CostPrice:   body.CostPrice,
		MarketPrice: body.MarketPrice,
		Note:        body.Note,
		Image:       body.Image,
		Size:        body.Size,
		Type:        body.Type,
		IsShelves:   body.IsShelves,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Product Create endpoint from
// CLI flags.
func BuildCreatePayload(productCreateBody string, productCreateToken string) (*product.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(productCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"code\": \"123asd123123asd\",\n      \"cost_price\": 123,\n      \"founder_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"image\": \"/images/123.jpg\",\n      \"is_shelves\": false,\n      \"market_price\": 123,\n      \"name\": \"灌装辣椒\",\n      \"note\": \"备注\",\n      \"size\": \"瓶\",\n      \"type\": 1,\n      \"unit\": 1\n   }'")
		}
		if !(body.Unit == 1 || body.Unit == 2 || body.Unit == 3 || body.Unit == 4 || body.Unit == 5 || body.Unit == 6 || body.Unit == 7 || body.Unit == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.unit", body.Unit, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3 || body.Type == 4 || body.Type == 5 || body.Type == 6 || body.Type == 7 || body.Type == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = productCreateToken
	}
	v := &product.CreatePayload{
		Name:        body.Name,
		Unit:        body.Unit,
		CostPrice:   body.CostPrice,
		MarketPrice: body.MarketPrice,
		Note:        body.Note,
		Image:       body.Image,
		Code:        body.Code,
		Size:        body.Size,
		Type:        body.Type,
		IsShelves:   body.IsShelves,
		FounderID:   body.FounderID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Product Delete endpoint from
// CLI flags.
func BuildDeletePayload(productDeleteBody string, productDeleteToken string) (*product.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(productDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = productDeleteToken
	}
	v := &product.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
