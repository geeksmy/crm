// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth HTTP client encoders and decoders
//
// Command:
// $ goa gen crm/design

package client

import (
	"bytes"
	"context"
	auth "crm/gen/auth"
	authviews "crm/gen/auth/views"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"

	goahttp "goa.design/goa/v3/http"
)

// BuildLoginRequest instantiates a HTTP request object with method and path
// set to call the "Auth" service "Login" endpoint
func (c *Client) BuildLoginRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: LoginAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Auth", "Login", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeLoginRequest returns an encoder for requests sent to the Auth Login
// server.
func EncodeLoginRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.LoginPayload)
		if !ok {
			return goahttp.ErrInvalidType("Auth", "Login", "*auth.LoginPayload", v)
		}
		body := NewLoginRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Auth", "Login", err)
		}
		return nil
	}
}

// DecodeLoginResponse returns a decoder for responses returned by the Auth
// Login endpoint. restoreBody controls whether the response body should be
// restored after having been read.
// DecodeLoginResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeLoginResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body LoginResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "Login", err)
			}
			p := NewLoginSessionOK(&body)
			view := "default"
			vres := &authviews.Session{Projected: p, View: view}
			if err = authviews.ValidateSession(vres); err != nil {
				return nil, goahttp.ErrValidationError("Auth", "Login", err)
			}
			res := auth.NewSession(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body LoginInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "Login", err)
			}
			err = ValidateLoginInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "Login", err)
			}
			return nil, NewLoginInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body LoginBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "Login", err)
			}
			err = ValidateLoginBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "Login", err)
			}
			return nil, NewLoginBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Auth", "Login", resp.StatusCode, string(body))
		}
	}
}

// BuildUpdatePasswordRequest instantiates a HTTP request object with method
// and path set to call the "Auth" service "UpdatePassword" endpoint
func (c *Client) BuildUpdatePasswordRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: UpdatePasswordAuthPath()}
	req, err := http.NewRequest("POST", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Auth", "UpdatePassword", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeUpdatePasswordRequest returns an encoder for requests sent to the Auth
// UpdatePassword server.
func EncodeUpdatePasswordRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*auth.UpdatePasswordPayload)
		if !ok {
			return goahttp.ErrInvalidType("Auth", "UpdatePassword", "*auth.UpdatePasswordPayload", v)
		}
		{
			head := p.Token
			if !strings.Contains(head, " ") {
				req.Header.Set("Authorization", "Bearer "+head)
			} else {
				req.Header.Set("Authorization", head)
			}
		}
		body := NewUpdatePasswordRequestBody(p)
		if err := encoder(req).Encode(&body); err != nil {
			return goahttp.ErrEncodingError("Auth", "UpdatePassword", err)
		}
		return nil
	}
}

// DecodeUpdatePasswordResponse returns a decoder for responses returned by the
// Auth UpdatePassword endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeUpdatePasswordResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeUpdatePasswordResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body UpdatePasswordResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "UpdatePassword", err)
			}
			p := NewUpdatePasswordSuccessResultOK(&body)
			view := "default"
			vres := &authviews.SuccessResult{Projected: p, View: view}
			if err = authviews.ValidateSuccessResult(vres); err != nil {
				return nil, goahttp.ErrValidationError("Auth", "UpdatePassword", err)
			}
			res := auth.NewSuccessResult(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body UpdatePasswordInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "UpdatePassword", err)
			}
			err = ValidateUpdatePasswordInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "UpdatePassword", err)
			}
			return nil, NewUpdatePasswordInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body UpdatePasswordBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "UpdatePassword", err)
			}
			err = ValidateUpdatePasswordBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "UpdatePassword", err)
			}
			return nil, NewUpdatePasswordBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Auth", "UpdatePassword", resp.StatusCode, string(body))
		}
	}
}

// BuildCaptchaImageRequest instantiates a HTTP request object with method and
// path set to call the "Auth" service "CaptchaImage" endpoint
func (c *Client) BuildCaptchaImageRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: CaptchaImageAuthPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("Auth", "CaptchaImage", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeCaptchaImageResponse returns a decoder for responses returned by the
// Auth CaptchaImage endpoint. restoreBody controls whether the response body
// should be restored after having been read.
// DecodeCaptchaImageResponse may return the following errors:
//	- "internal_server_error" (type *goa.ServiceError): http.StatusInternalServerError
//	- "bad_request" (type *goa.ServiceError): http.StatusBadRequest
//	- error: internal error
func DecodeCaptchaImageResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body CaptchaImageResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "CaptchaImage", err)
			}
			p := NewCaptchaImageCaptchaOK(&body)
			view := "default"
			vres := &authviews.Captcha{Projected: p, View: view}
			if err = authviews.ValidateCaptcha(vres); err != nil {
				return nil, goahttp.ErrValidationError("Auth", "CaptchaImage", err)
			}
			res := auth.NewCaptcha(vres)
			return res, nil
		case http.StatusInternalServerError:
			var (
				body CaptchaImageInternalServerErrorResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "CaptchaImage", err)
			}
			err = ValidateCaptchaImageInternalServerErrorResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "CaptchaImage", err)
			}
			return nil, NewCaptchaImageInternalServerError(&body)
		case http.StatusBadRequest:
			var (
				body CaptchaImageBadRequestResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("Auth", "CaptchaImage", err)
			}
			err = ValidateCaptchaImageBadRequestResponseBody(&body)
			if err != nil {
				return nil, goahttp.ErrValidationError("Auth", "CaptchaImage", err)
			}
			return nil, NewCaptchaImageBadRequest(&body)
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("Auth", "CaptchaImage", resp.StatusCode, string(body))
		}
	}
}

// unmarshalUserResponseBodyToAuthviewsUserView builds a value of type
// *authviews.UserView from a value of type *UserResponseBody.
func unmarshalUserResponseBodyToAuthviewsUserView(v *UserResponseBody) *authviews.UserView {
	res := &authviews.UserView{
		ID:       v.ID,
		Username: v.Username,
		Name:     v.Name,
		Mobile:   v.Mobile,
		Email:    v.Email,
		Jobs:     v.Jobs,
		IsAdmin:  v.IsAdmin,
	}
	res.Superior = unmarshalSuperiorResponseBodyToAuthviewsSuperiorView(v.Superior)
	res.Group = unmarshalGroupResponseBodyToAuthviewsGroupView(v.Group)

	return res
}

// unmarshalSuperiorResponseBodyToAuthviewsSuperiorView builds a value of type
// *authviews.SuperiorView from a value of type *SuperiorResponseBody.
func unmarshalSuperiorResponseBodyToAuthviewsSuperiorView(v *SuperiorResponseBody) *authviews.SuperiorView {
	res := &authviews.SuperiorView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalGroupResponseBodyToAuthviewsGroupView builds a value of type
// *authviews.GroupView from a value of type *GroupResponseBody.
func unmarshalGroupResponseBodyToAuthviewsGroupView(v *GroupResponseBody) *authviews.GroupView {
	res := &authviews.GroupView{
		ID:   v.ID,
		Name: v.Name,
	}

	return res
}

// unmarshalCredentialsResponseBodyToAuthviewsCredentialsView builds a value of
// type *authviews.CredentialsView from a value of type
// *CredentialsResponseBody.
func unmarshalCredentialsResponseBodyToAuthviewsCredentialsView(v *CredentialsResponseBody) *authviews.CredentialsView {
	res := &authviews.CredentialsView{
		Token:     v.Token,
		ExpiresIn: v.ExpiresIn,
	}

	return res
}
