// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth HTTP client types
//
// Command:
// $ goa gen crm/design

package client

import (
	auth "crm/gen/auth"
	authviews "crm/gen/auth/views"

	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "Auth" service "Login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 密码
	Password string `form:"password" json:"password" xml:"password"`
	// 图形验证码
	HumanCode string `form:"humanCode" json:"humanCode" xml:"humanCode"`
	// 图形验证码ID
	CaptchaID string `form:"captchaId" json:"captchaId" xml:"captchaId"`
}

// UpdatePasswordRequestBody is the type of the "Auth" service "UpdatePassword"
// endpoint HTTP request body.
type UpdatePasswordRequestBody struct {
	OldPassword string `form:"old_password" json:"old_password" xml:"old_password"`
	NewPassword string `form:"new_password" json:"new_password" xml:"new_password"`
}

// LoginResponseBody is the type of the "Auth" service "Login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	User        *UserResponseBody        `form:"user,omitempty" json:"user,omitempty" xml:"user,omitempty"`
	Credentials *CredentialsResponseBody `form:"credentials,omitempty" json:"credentials,omitempty" xml:"credentials,omitempty"`
}

// UpdatePasswordResponseBody is the type of the "Auth" service
// "UpdatePassword" endpoint HTTP response body.
type UpdatePasswordResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// CaptchaImageResponseBody is the type of the "Auth" service "CaptchaImage"
// endpoint HTTP response body.
type CaptchaImageResponseBody struct {
	// 图片base64
	Image *string `form:"image,omitempty" json:"image,omitempty" xml:"image,omitempty"`
	// 验证码ID
	CaptchaID *string `form:"captchaId,omitempty" json:"captchaId,omitempty" xml:"captchaId,omitempty"`
}

// LoginInternalServerErrorResponseBody is the type of the "Auth" service
// "Login" endpoint HTTP response body for the "internal_server_error" error.
type LoginInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// LoginBadRequestResponseBody is the type of the "Auth" service "Login"
// endpoint HTTP response body for the "bad_request" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdatePasswordInternalServerErrorResponseBody is the type of the "Auth"
// service "UpdatePassword" endpoint HTTP response body for the
// "internal_server_error" error.
type UpdatePasswordInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdatePasswordBadRequestResponseBody is the type of the "Auth" service
// "UpdatePassword" endpoint HTTP response body for the "bad_request" error.
type UpdatePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CaptchaImageInternalServerErrorResponseBody is the type of the "Auth"
// service "CaptchaImage" endpoint HTTP response body for the
// "internal_server_error" error.
type CaptchaImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CaptchaImageBadRequestResponseBody is the type of the "Auth" service
// "CaptchaImage" endpoint HTTP response body for the "bad_request" error.
type CaptchaImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 手机号
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs *int `form:"jobs,omitempty" json:"jobs,omitempty" xml:"jobs,omitempty"`
	// 是否是管理员
	IsAdmin *bool `form:"is_admin,omitempty" json:"is_admin,omitempty" xml:"is_admin,omitempty"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior,omitempty" json:"superior,omitempty" xml:"superior,omitempty"`
	// 所属组
	Group *GroupResponseBody `form:"group,omitempty" json:"group,omitempty" xml:"group,omitempty"`
}

// SuperiorResponseBody is used to define fields on response body types.
type SuperiorResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// GroupResponseBody is used to define fields on response body types.
type GroupResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 组名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token *string `form:"token,omitempty" json:"token,omitempty" xml:"token,omitempty"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn *int `form:"expires_in,omitempty" json:"expires_in,omitempty" xml:"expires_in,omitempty"`
}

// NewLoginRequestBody builds the HTTP request body from the payload of the
// "Login" endpoint of the "Auth" service.
func NewLoginRequestBody(p *auth.LoginPayload) *LoginRequestBody {
	body := &LoginRequestBody{
		Username:  p.Username,
		Password:  p.Password,
		HumanCode: p.HumanCode,
		CaptchaID: p.CaptchaID,
	}
	{
		var zero string
		if body.HumanCode == zero {
			body.HumanCode = ""
		}
	}
	{
		var zero string
		if body.CaptchaID == zero {
			body.CaptchaID = ""
		}
	}
	return body
}

// NewUpdatePasswordRequestBody builds the HTTP request body from the payload
// of the "UpdatePassword" endpoint of the "Auth" service.
func NewUpdatePasswordRequestBody(p *auth.UpdatePasswordPayload) *UpdatePasswordRequestBody {
	body := &UpdatePasswordRequestBody{
		OldPassword: p.OldPassword,
		NewPassword: p.NewPassword,
	}
	return body
}

// NewLoginSessionOK builds a "Auth" service "Login" endpoint result from a
// HTTP "OK" response.
func NewLoginSessionOK(body *LoginResponseBody) *authviews.SessionView {
	v := &authviews.SessionView{}
	v.User = unmarshalUserResponseBodyToAuthviewsUserView(body.User)
	v.Credentials = unmarshalCredentialsResponseBodyToAuthviewsCredentialsView(body.Credentials)

	return v
}

// NewLoginInternalServerError builds a Auth service Login endpoint
// internal_server_error error.
func NewLoginInternalServerError(body *LoginInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewLoginBadRequest builds a Auth service Login endpoint bad_request error.
func NewLoginBadRequest(body *LoginBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdatePasswordSuccessResultOK builds a "Auth" service "UpdatePassword"
// endpoint result from a HTTP "OK" response.
func NewUpdatePasswordSuccessResultOK(body *UpdatePasswordResponseBody) *authviews.SuccessResultView {
	v := &authviews.SuccessResultView{
		OK: body.OK,
	}

	return v
}

// NewUpdatePasswordInternalServerError builds a Auth service UpdatePassword
// endpoint internal_server_error error.
func NewUpdatePasswordInternalServerError(body *UpdatePasswordInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdatePasswordBadRequest builds a Auth service UpdatePassword endpoint
// bad_request error.
func NewUpdatePasswordBadRequest(body *UpdatePasswordBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCaptchaImageCaptchaOK builds a "Auth" service "CaptchaImage" endpoint
// result from a HTTP "OK" response.
func NewCaptchaImageCaptchaOK(body *CaptchaImageResponseBody) *authviews.CaptchaView {
	v := &authviews.CaptchaView{
		Image:     body.Image,
		CaptchaID: body.CaptchaID,
	}

	return v
}

// NewCaptchaImageInternalServerError builds a Auth service CaptchaImage
// endpoint internal_server_error error.
func NewCaptchaImageInternalServerError(body *CaptchaImageInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCaptchaImageBadRequest builds a Auth service CaptchaImage endpoint
// bad_request error.
func NewCaptchaImageBadRequest(body *CaptchaImageBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateLoginInternalServerErrorResponseBody runs the validations defined on
// Login_internal_server_error_Response_Body
func ValidateLoginInternalServerErrorResponseBody(body *LoginInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateLoginBadRequestResponseBody runs the validations defined on
// Login_bad_request_Response_Body
func ValidateLoginBadRequestResponseBody(body *LoginBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdatePasswordInternalServerErrorResponseBody runs the validations
// defined on UpdatePassword_internal_server_error_Response_Body
func ValidateUpdatePasswordInternalServerErrorResponseBody(body *UpdatePasswordInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdatePasswordBadRequestResponseBody runs the validations defined on
// UpdatePassword_bad_request_Response_Body
func ValidateUpdatePasswordBadRequestResponseBody(body *UpdatePasswordBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCaptchaImageInternalServerErrorResponseBody runs the validations
// defined on CaptchaImage_internal_server_error_Response_Body
func ValidateCaptchaImageInternalServerErrorResponseBody(body *CaptchaImageInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCaptchaImageBadRequestResponseBody runs the validations defined on
// CaptchaImage_bad_request_Response_Body
func ValidateCaptchaImageBadRequestResponseBody(body *CaptchaImageBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUserResponseBody runs the validations defined on UserResponseBody
func ValidateUserResponseBody(body *UserResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Jobs == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("jobs", "body"))
	}
	if body.IsAdmin == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_admin", "body"))
	}
	if body.Superior == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("superior", "body"))
	}
	if body.Group == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("group", "body"))
	}
	if body.Jobs != nil {
		if !(*body.Jobs == 1 || *body.Jobs == 2 || *body.Jobs == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.jobs", *body.Jobs, []interface{}{1, 2, 3}))
		}
	}
	if body.Superior != nil {
		if err2 := ValidateSuperiorResponseBody(body.Superior); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Group != nil {
		if err2 := ValidateGroupResponseBody(body.Group); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateSuperiorResponseBody runs the validations defined on
// SuperiorResponseBody
func ValidateSuperiorResponseBody(body *SuperiorResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateGroupResponseBody runs the validations defined on GroupResponseBody
func ValidateGroupResponseBody(body *GroupResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateCredentialsResponseBody runs the validations defined on
// CredentialsResponseBody
func ValidateCredentialsResponseBody(body *CredentialsResponseBody) (err error) {
	if body.Token == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("token", "body"))
	}
	if body.ExpiresIn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("expires_in", "body"))
	}
	return
}
