// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth HTTP server types
//
// Command:
// $ goa gen crm/design

package server

import (
	auth "crm/gen/auth"
	authviews "crm/gen/auth/views"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// LoginRequestBody is the type of the "Auth" service "Login" endpoint HTTP
// request body.
type LoginRequestBody struct {
	// 用户名
	Username *string `form:"username,omitempty" json:"username,omitempty" xml:"username,omitempty"`
	// 密码
	Password *string `form:"password,omitempty" json:"password,omitempty" xml:"password,omitempty"`
	// 图形验证码
	HumanCode *string `form:"humanCode,omitempty" json:"humanCode,omitempty" xml:"humanCode,omitempty"`
	// 图形验证码ID
	CaptchaID *string `form:"captchaId,omitempty" json:"captchaId,omitempty" xml:"captchaId,omitempty"`
}

// UpdatePasswordRequestBody is the type of the "Auth" service "UpdatePassword"
// endpoint HTTP request body.
type UpdatePasswordRequestBody struct {
	OldPassword *string `form:"old_password,omitempty" json:"old_password,omitempty" xml:"old_password,omitempty"`
	NewPassword *string `form:"new_password,omitempty" json:"new_password,omitempty" xml:"new_password,omitempty"`
}

// LoginResponseBody is the type of the "Auth" service "Login" endpoint HTTP
// response body.
type LoginResponseBody struct {
	User        *UserResponseBody        `form:"user" json:"user" xml:"user"`
	Credentials *CredentialsResponseBody `form:"credentials" json:"credentials" xml:"credentials"`
}

// UpdatePasswordResponseBody is the type of the "Auth" service
// "UpdatePassword" endpoint HTTP response body.
type UpdatePasswordResponseBody struct {
	// success
	OK bool `form:"ok" json:"ok" xml:"ok"`
}

// CaptchaImageResponseBody is the type of the "Auth" service "CaptchaImage"
// endpoint HTTP response body.
type CaptchaImageResponseBody struct {
	// 图片base64
	Image string `form:"image" json:"image" xml:"image"`
	// 验证码ID
	CaptchaID string `form:"captchaId" json:"captchaId" xml:"captchaId"`
}

// LoginInternalServerErrorResponseBody is the type of the "Auth" service
// "Login" endpoint HTTP response body for the "internal_server_error" error.
type LoginInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// LoginBadRequestResponseBody is the type of the "Auth" service "Login"
// endpoint HTTP response body for the "bad_request" error.
type LoginBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePasswordInternalServerErrorResponseBody is the type of the "Auth"
// service "UpdatePassword" endpoint HTTP response body for the
// "internal_server_error" error.
type UpdatePasswordInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UpdatePasswordBadRequestResponseBody is the type of the "Auth" service
// "UpdatePassword" endpoint HTTP response body for the "bad_request" error.
type UpdatePasswordBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CaptchaImageInternalServerErrorResponseBody is the type of the "Auth"
// service "CaptchaImage" endpoint HTTP response body for the
// "internal_server_error" error.
type CaptchaImageInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// CaptchaImageBadRequestResponseBody is the type of the "Auth" service
// "CaptchaImage" endpoint HTTP response body for the "bad_request" error.
type CaptchaImageBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name string `form:"name" json:"name" xml:"name"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID string `form:"id" json:"id" xml:"id"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message string `form:"message" json:"message" xml:"message"`
	// Is the error temporary?
	Temporary bool `form:"temporary" json:"temporary" xml:"temporary"`
	// Is the error a timeout?
	Timeout bool `form:"timeout" json:"timeout" xml:"timeout"`
	// Is the error a server-side fault?
	Fault bool `form:"fault" json:"fault" xml:"fault"`
}

// UserResponseBody is used to define fields on response body types.
type UserResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 用户名
	Username string `form:"username" json:"username" xml:"username"`
	// 手机号
	Mobile string `form:"mobile" json:"mobile" xml:"mobile"`
	// 姓名
	Name string `form:"name" json:"name" xml:"name"`
	// 邮箱
	Email string `form:"email" json:"email" xml:"email"`
	// 1 - 推销员，2 - 经理，3 - 管理员
	Jobs int `form:"jobs" json:"jobs" xml:"jobs"`
	// 是否是管理员
	IsAdmin bool `form:"is_admin" json:"is_admin" xml:"is_admin"`
	// 直属上级
	Superior *SuperiorResponseBody `form:"superior" json:"superior" xml:"superior"`
	// 所属组
	Group *GroupResponseBody `form:"group" json:"group" xml:"group"`
}

// SuperiorResponseBody is used to define fields on response body types.
type SuperiorResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 姓名
	Name string `form:"name" json:"name" xml:"name"`
}

// GroupResponseBody is used to define fields on response body types.
type GroupResponseBody struct {
	// ID
	ID string `form:"id" json:"id" xml:"id"`
	// 组名
	Name string `form:"name" json:"name" xml:"name"`
}

// CredentialsResponseBody is used to define fields on response body types.
type CredentialsResponseBody struct {
	// JWT token
	Token string `form:"token" json:"token" xml:"token"`
	// 有效时长（秒）：生成之后x秒内有效
	ExpiresIn int `form:"expires_in" json:"expires_in" xml:"expires_in"`
}

// NewLoginResponseBody builds the HTTP response body from the result of the
// "Login" endpoint of the "Auth" service.
func NewLoginResponseBody(res *authviews.SessionView) *LoginResponseBody {
	body := &LoginResponseBody{}
	if res.User != nil {
		body.User = marshalAuthviewsUserViewToUserResponseBody(res.User)
	}
	if res.Credentials != nil {
		body.Credentials = marshalAuthviewsCredentialsViewToCredentialsResponseBody(res.Credentials)
	}
	return body
}

// NewUpdatePasswordResponseBody builds the HTTP response body from the result
// of the "UpdatePassword" endpoint of the "Auth" service.
func NewUpdatePasswordResponseBody(res *authviews.SuccessResultView) *UpdatePasswordResponseBody {
	body := &UpdatePasswordResponseBody{
		OK: *res.OK,
	}
	return body
}

// NewCaptchaImageResponseBody builds the HTTP response body from the result of
// the "CaptchaImage" endpoint of the "Auth" service.
func NewCaptchaImageResponseBody(res *authviews.CaptchaView) *CaptchaImageResponseBody {
	body := &CaptchaImageResponseBody{
		Image:     *res.Image,
		CaptchaID: *res.CaptchaID,
	}
	return body
}

// NewLoginInternalServerErrorResponseBody builds the HTTP response body from
// the result of the "Login" endpoint of the "Auth" service.
func NewLoginInternalServerErrorResponseBody(res *goa.ServiceError) *LoginInternalServerErrorResponseBody {
	body := &LoginInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginBadRequestResponseBody builds the HTTP response body from the result
// of the "Login" endpoint of the "Auth" service.
func NewLoginBadRequestResponseBody(res *goa.ServiceError) *LoginBadRequestResponseBody {
	body := &LoginBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePasswordInternalServerErrorResponseBody builds the HTTP response
// body from the result of the "UpdatePassword" endpoint of the "Auth" service.
func NewUpdatePasswordInternalServerErrorResponseBody(res *goa.ServiceError) *UpdatePasswordInternalServerErrorResponseBody {
	body := &UpdatePasswordInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewUpdatePasswordBadRequestResponseBody builds the HTTP response body from
// the result of the "UpdatePassword" endpoint of the "Auth" service.
func NewUpdatePasswordBadRequestResponseBody(res *goa.ServiceError) *UpdatePasswordBadRequestResponseBody {
	body := &UpdatePasswordBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCaptchaImageInternalServerErrorResponseBody builds the HTTP response body
// from the result of the "CaptchaImage" endpoint of the "Auth" service.
func NewCaptchaImageInternalServerErrorResponseBody(res *goa.ServiceError) *CaptchaImageInternalServerErrorResponseBody {
	body := &CaptchaImageInternalServerErrorResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewCaptchaImageBadRequestResponseBody builds the HTTP response body from the
// result of the "CaptchaImage" endpoint of the "Auth" service.
func NewCaptchaImageBadRequestResponseBody(res *goa.ServiceError) *CaptchaImageBadRequestResponseBody {
	body := &CaptchaImageBadRequestResponseBody{
		Name:      res.Name,
		ID:        res.ID,
		Message:   res.Message,
		Temporary: res.Temporary,
		Timeout:   res.Timeout,
		Fault:     res.Fault,
	}
	return body
}

// NewLoginPayload builds a Auth service Login endpoint payload.
func NewLoginPayload(body *LoginRequestBody) *auth.LoginPayload {
	v := &auth.LoginPayload{
		Username: *body.Username,
		Password: *body.Password,
	}
	if body.HumanCode != nil {
		v.HumanCode = *body.HumanCode
	}
	if body.CaptchaID != nil {
		v.CaptchaID = *body.CaptchaID
	}
	if body.HumanCode == nil {
		v.HumanCode = ""
	}
	if body.CaptchaID == nil {
		v.CaptchaID = ""
	}

	return v
}

// NewUpdatePasswordPayload builds a Auth service UpdatePassword endpoint
// payload.
func NewUpdatePasswordPayload(body *UpdatePasswordRequestBody, token string) *auth.UpdatePasswordPayload {
	v := &auth.UpdatePasswordPayload{
		OldPassword: *body.OldPassword,
		NewPassword: *body.NewPassword,
	}
	v.Token = token

	return v
}

// ValidateLoginRequestBody runs the validations defined on LoginRequestBody
func ValidateLoginRequestBody(body *LoginRequestBody) (err error) {
	if body.Username == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("username", "body"))
	}
	if body.Password == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("password", "body"))
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 1, true))
		}
	}
	if body.Username != nil {
		if utf8.RuneCountInString(*body.Username) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.username", *body.Username, utf8.RuneCountInString(*body.Username), 128, false))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 1, true))
		}
	}
	if body.Password != nil {
		if utf8.RuneCountInString(*body.Password) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.password", *body.Password, utf8.RuneCountInString(*body.Password), 128, false))
		}
	}
	if body.HumanCode != nil {
		if utf8.RuneCountInString(*body.HumanCode) < 4 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", *body.HumanCode, utf8.RuneCountInString(*body.HumanCode), 4, true))
		}
	}
	if body.HumanCode != nil {
		if utf8.RuneCountInString(*body.HumanCode) > 8 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.humanCode", *body.HumanCode, utf8.RuneCountInString(*body.HumanCode), 8, false))
		}
	}
	if body.CaptchaID != nil {
		if utf8.RuneCountInString(*body.CaptchaID) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", *body.CaptchaID, utf8.RuneCountInString(*body.CaptchaID), 1, true))
		}
	}
	if body.CaptchaID != nil {
		if utf8.RuneCountInString(*body.CaptchaID) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.captchaId", *body.CaptchaID, utf8.RuneCountInString(*body.CaptchaID), 128, false))
		}
	}
	return
}

// ValidateUpdatePasswordRequestBody runs the validations defined on
// UpdatePasswordRequestBody
func ValidateUpdatePasswordRequestBody(body *UpdatePasswordRequestBody) (err error) {
	if body.OldPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("old_password", "body"))
	}
	if body.NewPassword == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("new_password", "body"))
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) < 1 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 1, true))
		}
	}
	if body.OldPassword != nil {
		if utf8.RuneCountInString(*body.OldPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.old_password", *body.OldPassword, utf8.RuneCountInString(*body.OldPassword), 128, false))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) < 6 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 6, true))
		}
	}
	if body.NewPassword != nil {
		if utf8.RuneCountInString(*body.NewPassword) > 128 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.new_password", *body.NewPassword, utf8.RuneCountInString(*body.NewPassword), 128, false))
		}
	}
	return
}
