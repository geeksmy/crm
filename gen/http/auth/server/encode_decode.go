// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Auth HTTP server encoders and decoders
//
// Command:
// $ goa gen crm/design

package server

import (
	"context"
	authviews "crm/gen/auth/views"
	"io"
	"net/http"
	"strings"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeLoginResponse returns an encoder for responses returned by the Auth
// Login endpoint.
func EncodeLoginResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*authviews.Session)
		enc := encoder(ctx, w)
		body := NewLoginResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeLoginRequest returns a decoder for requests sent to the Auth Login
// endpoint.
func DecodeLoginRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body LoginRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateLoginRequestBody(&body)
		if err != nil {
			return nil, err
		}
		payload := NewLoginPayload(&body)

		return payload, nil
	}
}

// EncodeLoginError returns an encoder for errors returned by the Login Auth
// endpoint.
func EncodeLoginError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewLoginBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeUpdatePasswordResponse returns an encoder for responses returned by
// the Auth UpdatePassword endpoint.
func EncodeUpdatePasswordResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*authviews.SuccessResult)
		enc := encoder(ctx, w)
		body := NewUpdatePasswordResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeUpdatePasswordRequest returns a decoder for requests sent to the Auth
// UpdatePassword endpoint.
func DecodeUpdatePasswordRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			body UpdatePasswordRequestBody
			err  error
		)
		err = decoder(r).Decode(&body)
		if err != nil {
			if err == io.EOF {
				return nil, goa.MissingPayloadError()
			}
			return nil, goa.DecodePayloadError(err.Error())
		}
		err = ValidateUpdatePasswordRequestBody(&body)
		if err != nil {
			return nil, err
		}

		var (
			token string
		)
		token = r.Header.Get("Authorization")
		if token == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		if err != nil {
			return nil, err
		}
		payload := NewUpdatePasswordPayload(&body, token)
		if strings.Contains(payload.Token, " ") {
			// Remove authorization scheme prefix (e.g. "Bearer")
			cred := strings.SplitN(payload.Token, " ", 2)[1]
			payload.Token = cred
		}

		return payload, nil
	}
}

// EncodeUpdatePasswordError returns an encoder for errors returned by the
// UpdatePassword Auth endpoint.
func EncodeUpdatePasswordError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdatePasswordInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewUpdatePasswordBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// EncodeCaptchaImageResponse returns an encoder for responses returned by the
// Auth CaptchaImage endpoint.
func EncodeCaptchaImageResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*authviews.Captcha)
		enc := encoder(ctx, w)
		body := NewCaptchaImageResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeCaptchaImageError returns an encoder for errors returned by the
// CaptchaImage Auth endpoint.
func EncodeCaptchaImageError(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder, formatter func(err error) goahttp.Statuser) func(context.Context, http.ResponseWriter, error) error {
	encodeError := goahttp.ErrorEncoder(encoder, formatter)
	return func(ctx context.Context, w http.ResponseWriter, v error) error {
		en, ok := v.(ErrorNamer)
		if !ok {
			return encodeError(ctx, w, v)
		}
		switch en.ErrorName() {
		case "internal_server_error":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCaptchaImageInternalServerErrorResponseBody(res)
			}
			w.Header().Set("goa-error", "internal_server_error")
			w.WriteHeader(http.StatusInternalServerError)
			return enc.Encode(body)
		case "bad_request":
			res := v.(*goa.ServiceError)
			enc := encoder(ctx, w)
			var body interface{}
			if formatter != nil {
				body = formatter(res)
			} else {
				body = NewCaptchaImageBadRequestResponseBody(res)
			}
			w.Header().Set("goa-error", "bad_request")
			w.WriteHeader(http.StatusBadRequest)
			return enc.Encode(body)
		default:
			return encodeError(ctx, w, v)
		}
	}
}

// marshalAuthviewsUserViewToUserResponseBody builds a value of type
// *UserResponseBody from a value of type *authviews.UserView.
func marshalAuthviewsUserViewToUserResponseBody(v *authviews.UserView) *UserResponseBody {
	res := &UserResponseBody{
		ID:       *v.ID,
		Username: *v.Username,
		Name:     *v.Name,
		Mobile:   *v.Mobile,
		Email:    *v.Email,
		Jobs:     *v.Jobs,
		IsAdmin:  *v.IsAdmin,
	}
	if v.Superior != nil {
		res.Superior = marshalAuthviewsSuperiorViewToSuperiorResponseBody(v.Superior)
	}
	if v.Group != nil {
		res.Group = marshalAuthviewsGroupViewToGroupResponseBody(v.Group)
	}

	return res
}

// marshalAuthviewsSuperiorViewToSuperiorResponseBody builds a value of type
// *SuperiorResponseBody from a value of type *authviews.SuperiorView.
func marshalAuthviewsSuperiorViewToSuperiorResponseBody(v *authviews.SuperiorView) *SuperiorResponseBody {
	res := &SuperiorResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalAuthviewsGroupViewToGroupResponseBody builds a value of type
// *GroupResponseBody from a value of type *authviews.GroupView.
func marshalAuthviewsGroupViewToGroupResponseBody(v *authviews.GroupView) *GroupResponseBody {
	res := &GroupResponseBody{
		ID:   *v.ID,
		Name: *v.Name,
	}

	return res
}

// marshalAuthviewsCredentialsViewToCredentialsResponseBody builds a value of
// type *CredentialsResponseBody from a value of type
// *authviews.CredentialsView.
func marshalAuthviewsCredentialsViewToCredentialsResponseBody(v *authviews.CredentialsView) *CredentialsResponseBody {
	res := &CredentialsResponseBody{
		Token:     *v.Token,
		ExpiresIn: *v.ExpiresIn,
	}

	return res
}
