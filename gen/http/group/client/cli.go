// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Group HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	group "crm/gen/group"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Group Get endpoint from CLI flags.
func BuildGetPayload(groupGetID string, groupGetToken string) (*group.GetPayload, error) {
	var id string
	{
		id = groupGetID
	}
	var token string
	{
		token = groupGetToken
	}
	v := &group.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Group List endpoint from CLI
// flags.
func BuildListPayload(groupListCursor string, groupListLimit string, groupListToken string) (*group.ListPayload, error) {
	var err error
	var cursor *int
	{
		if groupListCursor != "" {
			var v int64
			v, err = strconv.ParseInt(groupListCursor, 10, 64)
			val := int(v)
			cursor = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for cursor, must be INT")
			}
		}
	}
	var limit *int
	{
		if groupListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(groupListLimit, 10, 64)
			val := int(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
		}
	}
	var token string
	{
		token = groupListToken
	}
	v := &group.ListPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Group Update endpoint from CLI
// flags.
func BuildUpdatePayload(groupUpdateBody string, groupUpdateToken string) (*group.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(groupUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"name\": \"管理员\"\n   }'")
		}
	}
	var token string
	{
		token = groupUpdateToken
	}
	v := &group.UpdatePayload{
		ID:   body.ID,
		Name: body.Name,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Group Create endpoint from CLI
// flags.
func BuildCreatePayload(groupCreateBody string, groupCreateToken string) (*group.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(groupCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"name\": \"张三\"\n   }'")
		}
	}
	var token string
	{
		token = groupCreateToken
	}
	v := &group.CreatePayload{
		Name: body.Name,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Group Delete endpoint from CLI
// flags.
func BuildDeletePayload(groupDeleteBody string, groupDeleteToken string) (*group.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(groupDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = groupDeleteToken
	}
	v := &group.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
