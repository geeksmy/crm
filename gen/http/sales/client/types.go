// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Sales HTTP client types
//
// Command:
// $ goa gen crm/design

package client

import (
	sales "crm/gen/sales"
	salesviews "crm/gen/sales/views"

	goa "goa.design/goa/v3/pkg"
)

// UpdateRequestBody is the type of the "Sales" service "Update" endpoint HTTP
// request body.
type UpdateRequestBody struct {
	// 用户ID
	ID string `form:"id" json:"id" xml:"id"`
	// 销售单名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 客户ID
	CustomerID *string `form:"customer_id,omitempty" json:"customer_id,omitempty" xml:"customer_id,omitempty"`
	// 销售金额
	Money *int `form:"money,omitempty" json:"money,omitempty" xml:"money,omitempty"`
	// 销售日期
	ConsignmentDate *string `form:"consignment_date,omitempty" json:"consignment_date,omitempty" xml:"consignment_date,omitempty"`
	// 销售还是退货
	IsSalesReturn *bool `form:"is_sales_return,omitempty" json:"is_sales_return,omitempty" xml:"is_sales_return,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 负责人ID
	HeadID *string `form:"head_id,omitempty" json:"head_id,omitempty" xml:"head_id,omitempty"`
}

// CreateRequestBody is the type of the "Sales" service "Create" endpoint HTTP
// request body.
type CreateRequestBody struct {
	// 销售单名
	Name string `form:"name" json:"name" xml:"name"`
	// 销售编码
	Code string `form:"code" json:"code" xml:"code"`
	// 客户ID
	CustomerID string `form:"customer_id" json:"customer_id" xml:"customer_id"`
	// 销售金额
	Money int `form:"money" json:"money" xml:"money"`
	// 销售日期
	ConsignmentDate string `form:"consignment_date" json:"consignment_date" xml:"consignment_date"`
	// 销售还是退货
	IsSalesReturn bool `form:"is_sales_return" json:"is_sales_return" xml:"is_sales_return"`
	// 备注
	Note string `form:"note" json:"note" xml:"note"`
	// 负责人
	HeadID string `form:"head_id" json:"head_id" xml:"head_id"`
	// 创建人
	FounderID string `form:"founder_id" json:"founder_id" xml:"founder_id"`
}

// DeleteRequestBody is the type of the "Sales" service "Delete" endpoint HTTP
// request body.
type DeleteRequestBody struct {
	Ids []string `form:"ids" json:"ids" xml:"ids"`
}

// GetResponseBody is the type of the "Sales" service "Get" endpoint HTTP
// response body.
type GetResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 销售单名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 销售编码
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 客户
	Customer *CustomerResponseBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	// 销售金额
	Money *int `form:"money,omitempty" json:"money,omitempty" xml:"money,omitempty"`
	// 销售日期
	ConsignmentDate *string `form:"consignment_date,omitempty" json:"consignment_date,omitempty" xml:"consignment_date,omitempty"`
	// 销售还是退货
	IsSalesReturn *bool `form:"is_sales_return,omitempty" json:"is_sales_return,omitempty" xml:"is_sales_return,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 负责人
	Head *HeadResponseBody `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	// 创建人
	Founder *FounderResponseBody `form:"founder,omitempty" json:"founder,omitempty" xml:"founder,omitempty"`
}

// ListResponseBody is the type of the "Sales" service "List" endpoint HTTP
// response body.
type ListResponseBody struct {
	Items []*SalesResponseBody `form:"items,omitempty" json:"items,omitempty" xml:"items,omitempty"`
	// 下一页游标
	NextCursor *int `form:"nextCursor,omitempty" json:"nextCursor,omitempty" xml:"nextCursor,omitempty"`
	// 总记录数
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// UpdateResponseBody is the type of the "Sales" service "Update" endpoint HTTP
// response body.
type UpdateResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 销售单名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 销售编码
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 客户
	Customer *CustomerResponseBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	// 销售金额
	Money *int `form:"money,omitempty" json:"money,omitempty" xml:"money,omitempty"`
	// 销售日期
	ConsignmentDate *string `form:"consignment_date,omitempty" json:"consignment_date,omitempty" xml:"consignment_date,omitempty"`
	// 销售还是退货
	IsSalesReturn *bool `form:"is_sales_return,omitempty" json:"is_sales_return,omitempty" xml:"is_sales_return,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 负责人
	Head *HeadResponseBody `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	// 创建人
	Founder *FounderResponseBody `form:"founder,omitempty" json:"founder,omitempty" xml:"founder,omitempty"`
}

// CreateResponseBody is the type of the "Sales" service "Create" endpoint HTTP
// response body.
type CreateResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 销售单名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 销售编码
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 客户
	Customer *CustomerResponseBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	// 销售金额
	Money *int `form:"money,omitempty" json:"money,omitempty" xml:"money,omitempty"`
	// 销售日期
	ConsignmentDate *string `form:"consignment_date,omitempty" json:"consignment_date,omitempty" xml:"consignment_date,omitempty"`
	// 销售还是退货
	IsSalesReturn *bool `form:"is_sales_return,omitempty" json:"is_sales_return,omitempty" xml:"is_sales_return,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 负责人
	Head *HeadResponseBody `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	// 创建人
	Founder *FounderResponseBody `form:"founder,omitempty" json:"founder,omitempty" xml:"founder,omitempty"`
}

// DeleteResponseBody is the type of the "Sales" service "Delete" endpoint HTTP
// response body.
type DeleteResponseBody struct {
	// success
	OK *bool `form:"ok,omitempty" json:"ok,omitempty" xml:"ok,omitempty"`
}

// GetInternalServerErrorResponseBody is the type of the "Sales" service "Get"
// endpoint HTTP response body for the "internal_server_error" error.
type GetInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// GetBadRequestResponseBody is the type of the "Sales" service "Get" endpoint
// HTTP response body for the "bad_request" error.
type GetBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListInternalServerErrorResponseBody is the type of the "Sales" service
// "List" endpoint HTTP response body for the "internal_server_error" error.
type ListInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// ListBadRequestResponseBody is the type of the "Sales" service "List"
// endpoint HTTP response body for the "bad_request" error.
type ListBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateInternalServerErrorResponseBody is the type of the "Sales" service
// "Update" endpoint HTTP response body for the "internal_server_error" error.
type UpdateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// UpdateBadRequestResponseBody is the type of the "Sales" service "Update"
// endpoint HTTP response body for the "bad_request" error.
type UpdateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateInternalServerErrorResponseBody is the type of the "Sales" service
// "Create" endpoint HTTP response body for the "internal_server_error" error.
type CreateInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CreateBadRequestResponseBody is the type of the "Sales" service "Create"
// endpoint HTTP response body for the "bad_request" error.
type CreateBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteInternalServerErrorResponseBody is the type of the "Sales" service
// "Delete" endpoint HTTP response body for the "internal_server_error" error.
type DeleteInternalServerErrorResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// DeleteBadRequestResponseBody is the type of the "Sales" service "Delete"
// endpoint HTTP response body for the "bad_request" error.
type DeleteBadRequestResponseBody struct {
	// Name is the name of this class of errors.
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// ID is a unique identifier for this particular occurrence of the problem.
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Message is a human-readable explanation specific to this occurrence of the
	// problem.
	Message *string `form:"message,omitempty" json:"message,omitempty" xml:"message,omitempty"`
	// Is the error temporary?
	Temporary *bool `form:"temporary,omitempty" json:"temporary,omitempty" xml:"temporary,omitempty"`
	// Is the error a timeout?
	Timeout *bool `form:"timeout,omitempty" json:"timeout,omitempty" xml:"timeout,omitempty"`
	// Is the error a server-side fault?
	Fault *bool `form:"fault,omitempty" json:"fault,omitempty" xml:"fault,omitempty"`
}

// CustomerResponseBody is used to define fields on response body types.
type CustomerResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 客户姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 客户来源
	Src *int `form:"src,omitempty" json:"src,omitempty" xml:"src,omitempty"`
	// 客户手机
	Mobile *string `form:"mobile,omitempty" json:"mobile,omitempty" xml:"mobile,omitempty"`
	// 客户网址
	URL *string `form:"url,omitempty" json:"url,omitempty" xml:"url,omitempty"`
	// 客户邮箱
	Email *string `form:"email,omitempty" json:"email,omitempty" xml:"email,omitempty"`
	// 客户行业
	Industry *int `form:"industry,omitempty" json:"industry,omitempty" xml:"industry,omitempty"`
	// 客户等级
	Level *int `form:"level,omitempty" json:"level,omitempty" xml:"level,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 客户地址
	Address *string `form:"address,omitempty" json:"address,omitempty" xml:"address,omitempty"`
}

// HeadResponseBody is used to define fields on response body types.
type HeadResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// FounderResponseBody is used to define fields on response body types.
type FounderResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 姓名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
}

// SalesResponseBody is used to define fields on response body types.
type SalesResponseBody struct {
	// ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// 销售单名
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// 销售编码
	Code *string `form:"code,omitempty" json:"code,omitempty" xml:"code,omitempty"`
	// 客户
	Customer *CustomerResponseBody `form:"customer,omitempty" json:"customer,omitempty" xml:"customer,omitempty"`
	// 销售金额
	Money *int `form:"money,omitempty" json:"money,omitempty" xml:"money,omitempty"`
	// 销售日期
	ConsignmentDate *string `form:"consignment_date,omitempty" json:"consignment_date,omitempty" xml:"consignment_date,omitempty"`
	// 销售还是退货
	IsSalesReturn *bool `form:"is_sales_return,omitempty" json:"is_sales_return,omitempty" xml:"is_sales_return,omitempty"`
	// 备注
	Note *string `form:"note,omitempty" json:"note,omitempty" xml:"note,omitempty"`
	// 负责人
	Head *HeadResponseBody `form:"head,omitempty" json:"head,omitempty" xml:"head,omitempty"`
	// 创建人
	Founder *FounderResponseBody `form:"founder,omitempty" json:"founder,omitempty" xml:"founder,omitempty"`
}

// NewUpdateRequestBody builds the HTTP request body from the payload of the
// "Update" endpoint of the "Sales" service.
func NewUpdateRequestBody(p *sales.UpdatePayload) *UpdateRequestBody {
	body := &UpdateRequestBody{
		ID:              p.ID,
		Name:            p.Name,
		CustomerID:      p.CustomerID,
		Money:           p.Money,
		ConsignmentDate: p.ConsignmentDate,
		IsSalesReturn:   p.IsSalesReturn,
		Note:            p.Note,
		HeadID:          p.HeadID,
	}
	return body
}

// NewCreateRequestBody builds the HTTP request body from the payload of the
// "Create" endpoint of the "Sales" service.
func NewCreateRequestBody(p *sales.CreatePayload) *CreateRequestBody {
	body := &CreateRequestBody{
		Name:            p.Name,
		Code:            p.Code,
		CustomerID:      p.CustomerID,
		Money:           p.Money,
		ConsignmentDate: p.ConsignmentDate,
		IsSalesReturn:   p.IsSalesReturn,
		Note:            p.Note,
		HeadID:          p.HeadID,
		FounderID:       p.FounderID,
	}
	return body
}

// NewDeleteRequestBody builds the HTTP request body from the payload of the
// "Delete" endpoint of the "Sales" service.
func NewDeleteRequestBody(p *sales.DeletePayload) *DeleteRequestBody {
	body := &DeleteRequestBody{}
	if p.Ids != nil {
		body.Ids = make([]string, len(p.Ids))
		for i, val := range p.Ids {
			body.Ids[i] = val
		}
	}
	return body
}

// NewGetSalesOK builds a "Sales" service "Get" endpoint result from a HTTP
// "OK" response.
func NewGetSalesOK(body *GetResponseBody) *salesviews.SalesView {
	v := &salesviews.SalesView{
		ID:              body.ID,
		Name:            body.Name,
		Code:            body.Code,
		Money:           body.Money,
		ConsignmentDate: body.ConsignmentDate,
		IsSalesReturn:   body.IsSalesReturn,
		Note:            body.Note,
	}
	v.Customer = unmarshalCustomerResponseBodyToSalesviewsCustomerView(body.Customer)
	v.Head = unmarshalHeadResponseBodyToSalesviewsHeadView(body.Head)
	v.Founder = unmarshalFounderResponseBodyToSalesviewsFounderView(body.Founder)

	return v
}

// NewGetInternalServerError builds a Sales service Get endpoint
// internal_server_error error.
func NewGetInternalServerError(body *GetInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewGetBadRequest builds a Sales service Get endpoint bad_request error.
func NewGetBadRequest(body *GetBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListResultOK builds a "Sales" service "List" endpoint result from a HTTP
// "OK" response.
func NewListResultOK(body *ListResponseBody) *sales.ListResult {
	v := &sales.ListResult{
		NextCursor: *body.NextCursor,
		Total:      *body.Total,
	}
	v.Items = make([]*sales.Sales, len(body.Items))
	for i, val := range body.Items {
		v.Items[i] = unmarshalSalesResponseBodyToSalesSales(val)
	}

	return v
}

// NewListInternalServerError builds a Sales service List endpoint
// internal_server_error error.
func NewListInternalServerError(body *ListInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewListBadRequest builds a Sales service List endpoint bad_request error.
func NewListBadRequest(body *ListBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateSalesOK builds a "Sales" service "Update" endpoint result from a
// HTTP "OK" response.
func NewUpdateSalesOK(body *UpdateResponseBody) *salesviews.SalesView {
	v := &salesviews.SalesView{
		ID:              body.ID,
		Name:            body.Name,
		Code:            body.Code,
		Money:           body.Money,
		ConsignmentDate: body.ConsignmentDate,
		IsSalesReturn:   body.IsSalesReturn,
		Note:            body.Note,
	}
	v.Customer = unmarshalCustomerResponseBodyToSalesviewsCustomerView(body.Customer)
	v.Head = unmarshalHeadResponseBodyToSalesviewsHeadView(body.Head)
	v.Founder = unmarshalFounderResponseBodyToSalesviewsFounderView(body.Founder)

	return v
}

// NewUpdateInternalServerError builds a Sales service Update endpoint
// internal_server_error error.
func NewUpdateInternalServerError(body *UpdateInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewUpdateBadRequest builds a Sales service Update endpoint bad_request error.
func NewUpdateBadRequest(body *UpdateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateSalesOK builds a "Sales" service "Create" endpoint result from a
// HTTP "OK" response.
func NewCreateSalesOK(body *CreateResponseBody) *salesviews.SalesView {
	v := &salesviews.SalesView{
		ID:              body.ID,
		Name:            body.Name,
		Code:            body.Code,
		Money:           body.Money,
		ConsignmentDate: body.ConsignmentDate,
		IsSalesReturn:   body.IsSalesReturn,
		Note:            body.Note,
	}
	v.Customer = unmarshalCustomerResponseBodyToSalesviewsCustomerView(body.Customer)
	v.Head = unmarshalHeadResponseBodyToSalesviewsHeadView(body.Head)
	v.Founder = unmarshalFounderResponseBodyToSalesviewsFounderView(body.Founder)

	return v
}

// NewCreateInternalServerError builds a Sales service Create endpoint
// internal_server_error error.
func NewCreateInternalServerError(body *CreateInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewCreateBadRequest builds a Sales service Create endpoint bad_request error.
func NewCreateBadRequest(body *CreateBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteSuccessResultOK builds a "Sales" service "Delete" endpoint result
// from a HTTP "OK" response.
func NewDeleteSuccessResultOK(body *DeleteResponseBody) *salesviews.SuccessResultView {
	v := &salesviews.SuccessResultView{
		OK: body.OK,
	}

	return v
}

// NewDeleteInternalServerError builds a Sales service Delete endpoint
// internal_server_error error.
func NewDeleteInternalServerError(body *DeleteInternalServerErrorResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// NewDeleteBadRequest builds a Sales service Delete endpoint bad_request error.
func NewDeleteBadRequest(body *DeleteBadRequestResponseBody) *goa.ServiceError {
	v := &goa.ServiceError{
		Name:      *body.Name,
		ID:        *body.ID,
		Message:   *body.Message,
		Temporary: *body.Temporary,
		Timeout:   *body.Timeout,
		Fault:     *body.Fault,
	}

	return v
}

// ValidateListResponseBody runs the validations defined on ListResponseBody
func ValidateListResponseBody(body *ListResponseBody) (err error) {
	if body.Items == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("items", "body"))
	}
	if body.NextCursor == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("nextCursor", "body"))
	}
	if body.Total == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("total", "body"))
	}
	for _, e := range body.Items {
		if e != nil {
			if err2 := ValidateSalesResponseBody(e); err2 != nil {
				err = goa.MergeErrors(err, err2)
			}
		}
	}
	return
}

// ValidateGetInternalServerErrorResponseBody runs the validations defined on
// Get_internal_server_error_Response_Body
func ValidateGetInternalServerErrorResponseBody(body *GetInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateGetBadRequestResponseBody runs the validations defined on
// Get_bad_request_Response_Body
func ValidateGetBadRequestResponseBody(body *GetBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListInternalServerErrorResponseBody runs the validations defined on
// List_internal_server_error_Response_Body
func ValidateListInternalServerErrorResponseBody(body *ListInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateListBadRequestResponseBody runs the validations defined on
// List_bad_request_Response_Body
func ValidateListBadRequestResponseBody(body *ListBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateInternalServerErrorResponseBody runs the validations defined
// on Update_internal_server_error_Response_Body
func ValidateUpdateInternalServerErrorResponseBody(body *UpdateInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateUpdateBadRequestResponseBody runs the validations defined on
// Update_bad_request_Response_Body
func ValidateUpdateBadRequestResponseBody(body *UpdateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateInternalServerErrorResponseBody runs the validations defined
// on Create_internal_server_error_Response_Body
func ValidateCreateInternalServerErrorResponseBody(body *CreateInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCreateBadRequestResponseBody runs the validations defined on
// Create_bad_request_Response_Body
func ValidateCreateBadRequestResponseBody(body *CreateBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteInternalServerErrorResponseBody runs the validations defined
// on Delete_internal_server_error_Response_Body
func ValidateDeleteInternalServerErrorResponseBody(body *DeleteInternalServerErrorResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateDeleteBadRequestResponseBody runs the validations defined on
// Delete_bad_request_Response_Body
func ValidateDeleteBadRequestResponseBody(body *DeleteBadRequestResponseBody) (err error) {
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Message == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("message", "body"))
	}
	if body.Temporary == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("temporary", "body"))
	}
	if body.Timeout == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("timeout", "body"))
	}
	if body.Fault == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("fault", "body"))
	}
	return
}

// ValidateCustomerResponseBody runs the validations defined on
// CustomerResponseBody
func ValidateCustomerResponseBody(body *CustomerResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Src == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("src", "body"))
	}
	if body.Mobile == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("mobile", "body"))
	}
	if body.URL == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("url", "body"))
	}
	if body.Email == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("email", "body"))
	}
	if body.Industry == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("industry", "body"))
	}
	if body.Level == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("level", "body"))
	}
	if body.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "body"))
	}
	if body.Address == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("address", "body"))
	}
	return
}

// ValidateHeadResponseBody runs the validations defined on HeadResponseBody
func ValidateHeadResponseBody(body *HeadResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateFounderResponseBody runs the validations defined on
// FounderResponseBody
func ValidateFounderResponseBody(body *FounderResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	return
}

// ValidateSalesResponseBody runs the validations defined on SalesResponseBody
func ValidateSalesResponseBody(body *SalesResponseBody) (err error) {
	if body.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "body"))
	}
	if body.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "body"))
	}
	if body.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "body"))
	}
	if body.Customer == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("customer", "body"))
	}
	if body.Money == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("money", "body"))
	}
	if body.ConsignmentDate == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("consignment_date", "body"))
	}
	if body.IsSalesReturn == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_sales_return", "body"))
	}
	if body.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "body"))
	}
	if body.Head == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("head", "body"))
	}
	if body.Founder == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("founder", "body"))
	}
	if body.Customer != nil {
		if err2 := ValidateCustomerResponseBody(body.Customer); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.IsSalesReturn != nil {
		if !(*body.IsSalesReturn == false || *body.IsSalesReturn == true) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.is_sales_return", *body.IsSalesReturn, []interface{}{false, true}))
		}
	}
	if body.Head != nil {
		if err2 := ValidateHeadResponseBody(body.Head); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if body.Founder != nil {
		if err2 := ValidateFounderResponseBody(body.Founder); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}
