// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Warehouse HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	warehouse "crm/gen/warehouse"
	"encoding/json"
	"fmt"
	"strconv"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Warehouse Get endpoint from CLI
// flags.
func BuildGetPayload(warehouseGetID string, warehouseGetToken string) (*warehouse.GetPayload, error) {
	var id string
	{
		id = warehouseGetID
	}
	var token string
	{
		token = warehouseGetToken
	}
	v := &warehouse.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Warehouse List endpoint from CLI
// flags.
func BuildListPayload(warehouseListCursor string, warehouseListLimit string, warehouseListToken string) (*warehouse.ListPayload, error) {
	var err error
	var cursor *int
	{
		if warehouseListCursor != "" {
			var v int64
			v, err = strconv.ParseInt(warehouseListCursor, 10, 64)
			val := int(v)
			cursor = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for cursor, must be INT")
			}
		}
	}
	var limit *int
	{
		if warehouseListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(warehouseListLimit, 10, 64)
			val := int(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
		}
	}
	var token string
	{
		token = warehouseListToken
	}
	v := &warehouse.ListPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Warehouse Update endpoint from
// CLI flags.
func BuildUpdatePayload(warehouseUpdateBody string, warehouseUpdateToken string) (*warehouse.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(warehouseUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"地址\",\n      \"code\": \"123awe12qwe\",\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"name\": \"1号仓库\",\n      \"type\": 1\n   }'")
		}
		if body.Type != nil {
			if !(*body.Type == 1 || *body.Type == 2 || *body.Type == 3) {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", *body.Type, []interface{}{1, 2, 3}))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = warehouseUpdateToken
	}
	v := &warehouse.UpdatePayload{
		ID:      body.ID,
		Name:    body.Name,
		Code:    body.Code,
		Address: body.Address,
		Type:    body.Type,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Warehouse Create endpoint from
// CLI flags.
func BuildCreatePayload(warehouseCreateBody string, warehouseCreateToken string) (*warehouse.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(warehouseCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"address\": \"地址\",\n      \"code\": \"123awe12qwe\",\n      \"founder_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"name\": \"1号仓库\",\n      \"type\": 1\n   }'")
		}
		if !(body.Type == 1 || body.Type == 2 || body.Type == 3) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.type", body.Type, []interface{}{1, 2, 3}))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = warehouseCreateToken
	}
	v := &warehouse.CreatePayload{
		Name:      body.Name,
		Code:      body.Code,
		Address:   body.Address,
		Type:      body.Type,
		FounderID: body.FounderID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Warehouse Delete endpoint from
// CLI flags.
func BuildDeletePayload(warehouseDeleteBody string, warehouseDeleteToken string) (*warehouse.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(warehouseDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = warehouseDeleteToken
	}
	v := &warehouse.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
