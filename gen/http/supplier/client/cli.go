// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Supplier HTTP client CLI support package
//
// Command:
// $ goa gen crm/design

package client

import (
	supplier "crm/gen/supplier"
	"encoding/json"
	"fmt"
	"strconv"
	"unicode/utf8"

	goa "goa.design/goa/v3/pkg"
)

// BuildGetPayload builds the payload for the Supplier Get endpoint from CLI
// flags.
func BuildGetPayload(supplierGetID string, supplierGetToken string) (*supplier.GetPayload, error) {
	var id string
	{
		id = supplierGetID
	}
	var token string
	{
		token = supplierGetToken
	}
	v := &supplier.GetPayload{}
	v.ID = id
	v.Token = token

	return v, nil
}

// BuildListPayload builds the payload for the Supplier List endpoint from CLI
// flags.
func BuildListPayload(supplierListCursor string, supplierListLimit string, supplierListToken string) (*supplier.ListPayload, error) {
	var err error
	var cursor *int
	{
		if supplierListCursor != "" {
			var v int64
			v, err = strconv.ParseInt(supplierListCursor, 10, 64)
			val := int(v)
			cursor = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for cursor, must be INT")
			}
		}
	}
	var limit *int
	{
		if supplierListLimit != "" {
			var v int64
			v, err = strconv.ParseInt(supplierListLimit, 10, 64)
			val := int(v)
			limit = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for limit, must be INT")
			}
		}
	}
	var token string
	{
		token = supplierListToken
	}
	v := &supplier.ListPayload{}
	v.Cursor = cursor
	v.Limit = limit
	v.Token = token

	return v, nil
}

// BuildUpdatePayload builds the payload for the Supplier Update endpoint from
// CLI flags.
func BuildUpdatePayload(supplierUpdateBody string, supplierUpdateToken string) (*supplier.UpdatePayload, error) {
	var err error
	var body UpdateRequestBody
	{
		err = json.Unmarshal([]byte(supplierUpdateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"contact_address\": \"咸阳\",\n      \"contact_name\": \"张三\",\n      \"contact_phone\": \"1808001010\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"level\": 1,\n      \"name\": \"xx公司\",\n      \"note\": \"备注\"\n   }'")
		}
		if body.Level != nil {
			if !(*body.Level == 1 || *body.Level == 2 || *body.Level == 3 || *body.Level == 4) {
				err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.level", *body.Level, []interface{}{1, 2, 3, 4}))
			}
		}
		if body.ContactPhone != nil {
			err = goa.MergeErrors(err, goa.ValidateFormat("body.contact_phone", *body.ContactPhone, goa.FormatRegexp))
		}
		if body.ContactPhone != nil {
			err = goa.MergeErrors(err, goa.ValidatePattern("body.contact_phone", *body.ContactPhone, "^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d)\\d{8}$"))
		}
		if body.ContactPhone != nil {
			if utf8.RuneCountInString(*body.ContactPhone) < 11 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.contact_phone", *body.ContactPhone, utf8.RuneCountInString(*body.ContactPhone), 11, true))
			}
		}
		if body.ContactPhone != nil {
			if utf8.RuneCountInString(*body.ContactPhone) > 11 {
				err = goa.MergeErrors(err, goa.InvalidLengthError("body.contact_phone", *body.ContactPhone, utf8.RuneCountInString(*body.ContactPhone), 11, false))
			}
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = supplierUpdateToken
	}
	v := &supplier.UpdatePayload{
		ID:             body.ID,
		Name:           body.Name,
		Level:          body.Level,
		ContactName:    body.ContactName,
		ContactPhone:   body.ContactPhone,
		ContactAddress: body.ContactAddress,
		Note:           body.Note,
		HeadID:         body.HeadID,
	}
	v.Token = token

	return v, nil
}

// BuildCreatePayload builds the payload for the Supplier Create endpoint from
// CLI flags.
func BuildCreatePayload(supplierCreateBody string, supplierCreateToken string) (*supplier.CreatePayload, error) {
	var err error
	var body CreateRequestBody
	{
		err = json.Unmarshal([]byte(supplierCreateBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"contact_address\": \"咸阳\",\n      \"contact_name\": \"张三\",\n      \"contact_phone\": \"1808001010\",\n      \"founder_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"head_id\": \"519151ca-6250-4eec-8016-1e14a68dc448\",\n      \"level\": 1,\n      \"name\": \"xx公司\",\n      \"note\": \"备注\"\n   }'")
		}
		if !(body.Level == 1 || body.Level == 2 || body.Level == 3 || body.Level == 4) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("body.level", body.Level, []interface{}{1, 2, 3, 4}))
		}
		err = goa.MergeErrors(err, goa.ValidateFormat("body.contact_phone", body.ContactPhone, goa.FormatRegexp))

		err = goa.MergeErrors(err, goa.ValidatePattern("body.contact_phone", body.ContactPhone, "^1(?:3\\d|4[4-9]|5[0-35-9]|6[67]|7[013-8]|8\\d|9\\d)\\d{8}$"))
		if utf8.RuneCountInString(body.ContactPhone) < 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.contact_phone", body.ContactPhone, utf8.RuneCountInString(body.ContactPhone), 11, true))
		}
		if utf8.RuneCountInString(body.ContactPhone) > 11 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.contact_phone", body.ContactPhone, utf8.RuneCountInString(body.ContactPhone), 11, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = supplierCreateToken
	}
	v := &supplier.CreatePayload{
		Name:           body.Name,
		Level:          body.Level,
		ContactName:    body.ContactName,
		ContactPhone:   body.ContactPhone,
		ContactAddress: body.ContactAddress,
		Note:           body.Note,
		HeadID:         body.HeadID,
		FounderID:      body.FounderID,
	}
	v.Token = token

	return v, nil
}

// BuildDeletePayload builds the payload for the Supplier Delete endpoint from
// CLI flags.
func BuildDeletePayload(supplierDeleteBody string, supplierDeleteToken string) (*supplier.DeletePayload, error) {
	var err error
	var body DeleteRequestBody
	{
		err = json.Unmarshal([]byte(supplierDeleteBody), &body)
		if err != nil {
			return nil, fmt.Errorf("invalid JSON for body, \nerror: %s, \nexample of valid JSON:\n%s", err, "'{\n      \"ids\": [\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\",\n         \"91cc3eb9-ddc0-4cf7-a62b-c85df1a9166f\"\n      ]\n   }'")
		}
		if body.Ids == nil {
			err = goa.MergeErrors(err, goa.MissingFieldError("ids", "body"))
		}
		if len(body.Ids) > 100 {
			err = goa.MergeErrors(err, goa.InvalidLengthError("body.ids", body.Ids, len(body.Ids), 100, false))
		}
		if err != nil {
			return nil, err
		}
	}
	var token string
	{
		token = supplierDeleteToken
	}
	v := &supplier.DeletePayload{}
	if body.Ids != nil {
		v.Ids = make([]string, len(body.Ids))
		for i, val := range body.Ids {
			v.Ids[i] = val
		}
	}
	v.Token = token

	return v, nil
}
