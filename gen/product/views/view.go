// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Product views
//
// Command:
// $ goa gen crm/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Product is the viewed result type that is projected based on a view.
type Product struct {
	// Type to project
	Projected *ProductView
	// View to render
	View string
}

// SuccessResult is the viewed result type that is projected based on a view.
type SuccessResult struct {
	// Type to project
	Projected *SuccessResultView
	// View to render
	View string
}

// ProductView is a type that runs validations on a projected type.
type ProductView struct {
	// ID
	ID *string
	// 产品名
	Name *string
	// 产品单位
	Unit *int
	// 成本价
	CostPrice *int
	// 市场价
	MarketPrice *int
	// 产品备注
	Note *string
	// 产品图片
	Image *string
	// 产品编码
	Code *string
	// 产品规格
	Size *string
	// 产品类型
	Type *int
	// 是否上架
	IsShelves *bool
	// 创建人
	Founder *FounderView
}

// FounderView is a type that runs validations on a projected type.
type FounderView struct {
	// ID
	ID *string
	// 姓名
	Name *string
}

// SuccessResultView is a type that runs validations on a projected type.
type SuccessResultView struct {
	// success
	OK *bool
}

var (
	// ProductMap is a map of attribute names in result type Product indexed by
	// view name.
	ProductMap = map[string][]string{
		"default": []string{
			"id",
			"name",
			"unit",
			"cost_price",
			"market_price",
			"note",
			"image",
			"code",
			"size",
			"type",
			"is_shelves",
			"founder",
		},
	}
	// SuccessResultMap is a map of attribute names in result type SuccessResult
	// indexed by view name.
	SuccessResultMap = map[string][]string{
		"default": []string{
			"ok",
		},
	}
	// FounderMap is a map of attribute names in result type Founder indexed by
	// view name.
	FounderMap = map[string][]string{
		"default": []string{
			"id",
			"name",
		},
	}
)

// ValidateProduct runs the validations defined on the viewed result type
// Product.
func ValidateProduct(result *Product) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateProductView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSuccessResult runs the validations defined on the viewed result type
// SuccessResult.
func ValidateSuccessResult(result *SuccessResult) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSuccessResultView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateProductView runs the validations defined on ProductView using the
// "default" view.
func ValidateProductView(result *ProductView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	if result.Unit == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("unit", "result"))
	}
	if result.CostPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("cost_price", "result"))
	}
	if result.MarketPrice == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("market_price", "result"))
	}
	if result.Note == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("note", "result"))
	}
	if result.Image == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("image", "result"))
	}
	if result.Code == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("code", "result"))
	}
	if result.Size == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("size", "result"))
	}
	if result.Type == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("type", "result"))
	}
	if result.IsShelves == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("is_shelves", "result"))
	}
	if result.Unit != nil {
		if !(*result.Unit == 1 || *result.Unit == 2 || *result.Unit == 3 || *result.Unit == 4 || *result.Unit == 5 || *result.Unit == 6 || *result.Unit == 7 || *result.Unit == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.unit", *result.Unit, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	if result.Type != nil {
		if !(*result.Type == 1 || *result.Type == 2 || *result.Type == 3 || *result.Type == 4 || *result.Type == 5 || *result.Type == 6 || *result.Type == 7 || *result.Type == 8) {
			err = goa.MergeErrors(err, goa.InvalidEnumValueError("result.type", *result.Type, []interface{}{1, 2, 3, 4, 5, 6, 7, 8}))
		}
	}
	if result.Founder != nil {
		if err2 := ValidateFounderView(result.Founder); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFounderView runs the validations defined on FounderView using the
// "default" view.
func ValidateFounderView(result *FounderView) (err error) {
	if result.ID == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("id", "result"))
	}
	if result.Name == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("name", "result"))
	}
	return
}

// ValidateSuccessResultView runs the validations defined on SuccessResultView
// using the "default" view.
func ValidateSuccessResultView(result *SuccessResultView) (err error) {
	if result.OK == nil {
		err = goa.MergeErrors(err, goa.MissingFieldError("ok", "result"))
	}
	return
}
