// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Group service
//
// Command:
// $ goa gen crm/design

package group

import (
	"context"
	groupviews "crm/gen/group/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 组服务
type Service interface {
	// 获取单个组
	Get(context.Context, *GetPayload) (res *Group, err error)
	// 获取组列表
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// 更新组
	Update(context.Context, *UpdatePayload) (res *Group, err error)
	// 创建组
	Create(context.Context, *CreatePayload) (res *Group, err error)
	// 删除组
	Delete(context.Context, *DeletePayload) (res *SuccessResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Group"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"Get", "List", "Update", "Create", "Delete"}

// GetPayload is the payload type of the Group service Get method.
type GetPayload struct {
	// JWT used for authentication
	Token string
	ID    string
}

// Group is the result type of the Group service Get method.
type Group struct {
	// ID
	ID string
	// 组名
	Name string
}

// ListPayload is the payload type of the Group service List method.
type ListPayload struct {
	// JWT used for authentication
	Token string
	// cursor of page
	Cursor *int
	// limit of items
	Limit *int
}

// ListResult is the result type of the Group service List method.
type ListResult struct {
	Items []*Group
	// 下一页游标
	NextCursor int
	// 总记录数
	Total int
}

// UpdatePayload is the payload type of the Group service Update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// 用户ID
	ID string
	// 组名
	Name *string
}

// CreatePayload is the payload type of the Group service Create method.
type CreatePayload struct {
	// JWT used for authentication
	Token string
	// 姓名
	Name string
}

// DeletePayload is the payload type of the Group service Delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	Ids   []string
}

// SuccessResult is the result type of the Group service Delete method.
type SuccessResult struct {
	// success
	OK bool
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewGroup initializes result type Group from viewed result type Group.
func NewGroup(vres *groupviews.Group) *Group {
	return newGroup(vres.Projected)
}

// NewViewedGroup initializes viewed result type Group from result type Group
// using the given view.
func NewViewedGroup(res *Group, view string) *groupviews.Group {
	p := newGroupView(res)
	return &groupviews.Group{Projected: p, View: "default"}
}

// NewSuccessResult initializes result type SuccessResult from viewed result
// type SuccessResult.
func NewSuccessResult(vres *groupviews.SuccessResult) *SuccessResult {
	return newSuccessResult(vres.Projected)
}

// NewViewedSuccessResult initializes viewed result type SuccessResult from
// result type SuccessResult using the given view.
func NewViewedSuccessResult(res *SuccessResult, view string) *groupviews.SuccessResult {
	p := newSuccessResultView(res)
	return &groupviews.SuccessResult{Projected: p, View: "default"}
}

// newGroup converts projected type Group to service type Group.
func newGroup(vres *groupviews.GroupView) *Group {
	res := &Group{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newGroupView projects result type Group to projected type GroupView using
// the "default" view.
func newGroupView(res *Group) *groupviews.GroupView {
	vres := &groupviews.GroupView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newSuccessResult converts projected type SuccessResult to service type
// SuccessResult.
func newSuccessResult(vres *groupviews.SuccessResultView) *SuccessResult {
	res := &SuccessResult{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessResultView projects result type SuccessResult to projected type
// SuccessResultView using the "default" view.
func newSuccessResultView(res *SuccessResult) *groupviews.SuccessResultView {
	vres := &groupviews.SuccessResultView{
		OK: &res.OK,
	}
	return vres
}
