// Code generated by goa v3.2.6, DO NOT EDIT.
//
// Inventory service
//
// Command:
// $ goa gen crm/design

package inventory

import (
	"context"
	inventoryviews "crm/gen/inventory/views"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// 库存服务
type Service interface {
	// 获取单个库存
	Get(context.Context, *GetPayload) (res *Inventory, err error)
	// 获取库存列表
	List(context.Context, *ListPayload) (res *ListResult, err error)
	// 更新库存
	Update(context.Context, *UpdatePayload) (res *Inventory, err error)
	// 创建库存
	Create(context.Context, *CreatePayload) (res *Inventory, err error)
	// 删除库存
	Delete(context.Context, *DeletePayload) (res *SuccessResult, err error)
}

// Auther defines the authorization functions to be implemented by the service.
type Auther interface {
	// JWTAuth implements the authorization logic for the JWT security scheme.
	JWTAuth(ctx context.Context, token string, schema *security.JWTScheme) (context.Context, error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "Inventory"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [5]string{"Get", "List", "Update", "Create", "Delete"}

// GetPayload is the payload type of the Inventory service Get method.
type GetPayload struct {
	// JWT used for authentication
	Token string
	ID    string
}

// Inventory is the result type of the Inventory service Get method.
type Inventory struct {
	// ID
	ID string
	// 产品
	Product *Product
	// 产品数量
	Number int
	// 库存单号
	Code string
	// 仓库
	Warehouse *Warehouse
	// 库存类型
	Type int
	// 库存时间
	InventoryDate string
	// 入库还是出库
	InAndOut int
	// 备注
	Note string
	// 负责人
	Head *Head
	// 创建人
	Founder *Founder
}

// ListPayload is the payload type of the Inventory service List method.
type ListPayload struct {
	// JWT used for authentication
	Token string
}

// ListResult is the result type of the Inventory service List method.
type ListResult struct {
	Items []*Inventory
	// 下一页游标
	NextCursor int
	// 总记录数
	Total int
}

// UpdatePayload is the payload type of the Inventory service Update method.
type UpdatePayload struct {
	// JWT used for authentication
	Token string
	// ID
	ID string
	// 产品ID
	ProductID string
	// 产品数量
	Number int
	// 库存单号
	Code string
	// 仓库ID
	WarehouseID string
	// 库存类型
	Type int
	// 库存时间
	InventoryDate string
	// 入库还是出库
	InAndOut int
	// 备注
	Note string
	// 负责人ID
	HeadID string
}

// CreatePayload is the payload type of the Inventory service Create method.
type CreatePayload struct {
	// JWT used for authentication
	Token string
	// 产品ID
	ProductID string
	// 产品数量
	Number int
	// 库存单号
	Code string
	// 仓库ID
	WarehouseID string
	// 库存类型
	Type int
	// 库存时间
	InventoryDate string
	// 入库还是出库
	InAndOut int
	// 备注
	Note string
	// 负责人ID
	HeadID string
	// 创建人ID
	FounderID string
}

// DeletePayload is the payload type of the Inventory service Delete method.
type DeletePayload struct {
	// JWT used for authentication
	Token string
	Ids   []string
}

// SuccessResult is the result type of the Inventory service Delete method.
type SuccessResult struct {
	// success
	OK bool
}

type Product struct {
	// ID
	ID string
	// 产品名
	Name string
	// 产品单位
	Unit int
	// 成本价
	CostPrice int
	// 市场价
	MarketPrice int
	// 产品备注
	Note string
	// 产品图片
	Image string
	// 产品编码
	Code string
	// 产品规格
	Size string
	// 产品类型
	Type int
	// 是否上架
	IsShelves bool
	// 创建人
	Founder *Founder
}

type Founder struct {
	// ID
	ID string
	// 姓名
	Name string
}

type Warehouse struct {
	// ID
	ID string
	// 仓库名
	Name string
	// 仓库编码
	Code string
	// 仓库地址
	Address string
	// 仓库状态
	Type int
	// 创建人
	Founder *Founder
}

type Head struct {
	// ID
	ID string
	// 姓名
	Name string
}

// MakeInternalServerError builds a goa.ServiceError from an error.
func MakeInternalServerError(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "internal_server_error",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// MakeBadRequest builds a goa.ServiceError from an error.
func MakeBadRequest(err error) *goa.ServiceError {
	return &goa.ServiceError{
		Name:    "bad_request",
		ID:      goa.NewErrorID(),
		Message: err.Error(),
	}
}

// NewInventory initializes result type Inventory from viewed result type
// Inventory.
func NewInventory(vres *inventoryviews.Inventory) *Inventory {
	return newInventory(vres.Projected)
}

// NewViewedInventory initializes viewed result type Inventory from result type
// Inventory using the given view.
func NewViewedInventory(res *Inventory, view string) *inventoryviews.Inventory {
	p := newInventoryView(res)
	return &inventoryviews.Inventory{Projected: p, View: "default"}
}

// NewSuccessResult initializes result type SuccessResult from viewed result
// type SuccessResult.
func NewSuccessResult(vres *inventoryviews.SuccessResult) *SuccessResult {
	return newSuccessResult(vres.Projected)
}

// NewViewedSuccessResult initializes viewed result type SuccessResult from
// result type SuccessResult using the given view.
func NewViewedSuccessResult(res *SuccessResult, view string) *inventoryviews.SuccessResult {
	p := newSuccessResultView(res)
	return &inventoryviews.SuccessResult{Projected: p, View: "default"}
}

// newInventory converts projected type Inventory to service type Inventory.
func newInventory(vres *inventoryviews.InventoryView) *Inventory {
	res := &Inventory{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Number != nil {
		res.Number = *vres.Number
	}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.InventoryDate != nil {
		res.InventoryDate = *vres.InventoryDate
	}
	if vres.InAndOut != nil {
		res.InAndOut = *vres.InAndOut
	}
	if vres.Note != nil {
		res.Note = *vres.Note
	}
	if vres.Product != nil {
		res.Product = newProduct(vres.Product)
	}
	if vres.Warehouse != nil {
		res.Warehouse = newWarehouse(vres.Warehouse)
	}
	if vres.Head != nil {
		res.Head = newHead(vres.Head)
	}
	if vres.Founder != nil {
		res.Founder = newFounder(vres.Founder)
	}
	return res
}

// newInventoryView projects result type Inventory to projected type
// InventoryView using the "default" view.
func newInventoryView(res *Inventory) *inventoryviews.InventoryView {
	vres := &inventoryviews.InventoryView{
		ID:            &res.ID,
		Number:        &res.Number,
		Code:          &res.Code,
		Type:          &res.Type,
		InventoryDate: &res.InventoryDate,
		InAndOut:      &res.InAndOut,
		Note:          &res.Note,
	}
	if res.Product != nil {
		vres.Product = newProductView(res.Product)
	}
	if res.Warehouse != nil {
		vres.Warehouse = newWarehouseView(res.Warehouse)
	}
	if res.Head != nil {
		vres.Head = newHeadView(res.Head)
	}
	if res.Founder != nil {
		vres.Founder = newFounderView(res.Founder)
	}
	return vres
}

// newProduct converts projected type Product to service type Product.
func newProduct(vres *inventoryviews.ProductView) *Product {
	res := &Product{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Unit != nil {
		res.Unit = *vres.Unit
	}
	if vres.CostPrice != nil {
		res.CostPrice = *vres.CostPrice
	}
	if vres.MarketPrice != nil {
		res.MarketPrice = *vres.MarketPrice
	}
	if vres.Note != nil {
		res.Note = *vres.Note
	}
	if vres.Image != nil {
		res.Image = *vres.Image
	}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Size != nil {
		res.Size = *vres.Size
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.IsShelves != nil {
		res.IsShelves = *vres.IsShelves
	}
	if vres.Founder != nil {
		res.Founder = newFounder(vres.Founder)
	}
	return res
}

// newProductView projects result type Product to projected type ProductView
// using the "default" view.
func newProductView(res *Product) *inventoryviews.ProductView {
	vres := &inventoryviews.ProductView{
		ID:          &res.ID,
		Name:        &res.Name,
		Unit:        &res.Unit,
		CostPrice:   &res.CostPrice,
		MarketPrice: &res.MarketPrice,
		Note:        &res.Note,
		Image:       &res.Image,
		Code:        &res.Code,
		Size:        &res.Size,
		Type:        &res.Type,
		IsShelves:   &res.IsShelves,
	}
	if res.Founder != nil {
		vres.Founder = newFounderView(res.Founder)
	}
	return vres
}

// newFounder converts projected type Founder to service type Founder.
func newFounder(vres *inventoryviews.FounderView) *Founder {
	res := &Founder{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newFounderView projects result type Founder to projected type FounderView
// using the "default" view.
func newFounderView(res *Founder) *inventoryviews.FounderView {
	vres := &inventoryviews.FounderView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newWarehouse converts projected type Warehouse to service type Warehouse.
func newWarehouse(vres *inventoryviews.WarehouseView) *Warehouse {
	res := &Warehouse{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	if vres.Code != nil {
		res.Code = *vres.Code
	}
	if vres.Address != nil {
		res.Address = *vres.Address
	}
	if vres.Type != nil {
		res.Type = *vres.Type
	}
	if vres.Founder != nil {
		res.Founder = newFounder(vres.Founder)
	}
	return res
}

// newWarehouseView projects result type Warehouse to projected type
// WarehouseView using the "default" view.
func newWarehouseView(res *Warehouse) *inventoryviews.WarehouseView {
	vres := &inventoryviews.WarehouseView{
		ID:      &res.ID,
		Name:    &res.Name,
		Code:    &res.Code,
		Address: &res.Address,
		Type:    &res.Type,
	}
	if res.Founder != nil {
		vres.Founder = newFounderView(res.Founder)
	}
	return vres
}

// newHead converts projected type Head to service type Head.
func newHead(vres *inventoryviews.HeadView) *Head {
	res := &Head{}
	if vres.ID != nil {
		res.ID = *vres.ID
	}
	if vres.Name != nil {
		res.Name = *vres.Name
	}
	return res
}

// newHeadView projects result type Head to projected type HeadView using the
// "default" view.
func newHeadView(res *Head) *inventoryviews.HeadView {
	vres := &inventoryviews.HeadView{
		ID:   &res.ID,
		Name: &res.Name,
	}
	return vres
}

// newSuccessResult converts projected type SuccessResult to service type
// SuccessResult.
func newSuccessResult(vres *inventoryviews.SuccessResultView) *SuccessResult {
	res := &SuccessResult{}
	if vres.OK != nil {
		res.OK = *vres.OK
	}
	return res
}

// newSuccessResultView projects result type SuccessResult to projected type
// SuccessResultView using the "default" view.
func newSuccessResultView(res *SuccessResult) *inventoryviews.SuccessResultView {
	vres := &inventoryviews.SuccessResultView{
		OK: &res.OK,
	}
	return vres
}
